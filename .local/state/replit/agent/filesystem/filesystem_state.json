{"file_contents":{"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: true,\n    port: 5173,\n    strictPort: true,\n    allowedHosts: true,\n  },\n});\n","size_bytes":989},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { GeocodeService } from \"./services/geocode-service\";\nimport { geocodeSearchSchema, apiResponseSchema, batchGeocodeSearchSchema, batchApiResponseSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const geocodeService = new GeocodeService();\n  \n  // Create HTTP server\n  const server = createServer(app);\n  \n  // Create WebSocket server on distinct path to avoid conflicts with Vite's HMR websocket\n  const wss = new WebSocketServer({ server: server, path: '/ws' });\n  \n  // Store active WebSocket connections by batch ID\n  const batchConnections = new Map<string, Set<WebSocket>>();\n  \n  // WebSocket connection handler\n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('WebSocket connection established');\n    \n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'subscribe_batch' && message.batchId) {\n          // Subscribe to batch progress updates\n          if (!batchConnections.has(message.batchId)) {\n            batchConnections.set(message.batchId, new Set());\n          }\n          batchConnections.get(message.batchId)!.add(ws);\n          \n          console.log(`WebSocket subscribed to batch: ${message.batchId}`);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      // Remove from all batch subscriptions\n      for (const [batchId, connections] of Array.from(batchConnections.entries())) {\n        connections.delete(ws);\n        if (connections.size === 0) {\n          batchConnections.delete(batchId);\n        }\n      }\n      console.log('WebSocket connection closed');\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n  \n  // Helper function to broadcast progress updates\n  function broadcastProgress(batchId: string, progressData: any) {\n    const connections = batchConnections.get(batchId);\n    if (!connections) return;\n    \n    const message = JSON.stringify({\n      type: 'batch_progress',\n      batchId,\n      ...progressData\n    });\n    \n    for (const ws of Array.from(connections)) {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(message);\n      }\n    }\n  }\n\n  app.post(\"/api/property/lookup\", async (req, res) => {\n    try {\n      const validation = geocodeSearchSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({\n          success: false,\n          error: validation.error.errors.map(e => e.message).join(', ')\n        });\n      }\n\n      const { geocode } = validation.data;\n      \n      const propertyInfo = await geocodeService.getPropertyInfo(geocode);\n      \n      const response = {\n        success: true,\n        data: propertyInfo\n      };\n\n      res.json(response);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      \n      res.status(500).json({\n        success: false,\n        error: errorMessage\n      });\n    }\n  });\n\n  app.post(\"/api/property/batch-lookup\", async (req, res) => {\n    const startedAt = new Date().toISOString();\n    const batchId = `batch_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    \n    try {\n      const validation = batchGeocodeSearchSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({\n          success: false,\n          error: validation.error.errors.map(e => e.message).join(', ')\n        });\n      }\n\n      const { geocodes } = validation.data;\n      \n      // Send initial progress update\n      broadcastProgress(batchId, {\n        status: 'started',\n        totalGeocodes: geocodes.length,\n        processedCount: 0,\n        successCount: 0,\n        failedCount: 0,\n        currentGeocode: null,\n        estimatedTimeRemaining: null,\n        startedAt\n      });\n      \n      // Process with progress updates\n      const results = await geocodeService.getPropertiesInfoBatchWithProgress(\n        geocodes, \n        batchId,\n        (progress) => broadcastProgress(batchId, progress)\n      );\n      \n      const successfulResults = results.filter(r => r.success);\n      const failedResults = results.filter(r => !r.success);\n      const completedAt = new Date().toISOString();\n      \n      // Send completion progress update\n      broadcastProgress(batchId, {\n        status: 'completed',\n        totalGeocodes: geocodes.length,\n        processedCount: geocodes.length,\n        successCount: successfulResults.length,\n        failedCount: failedResults.length,\n        currentGeocode: null,\n        estimatedTimeRemaining: 0,\n        completedAt\n      });\n      \n      const response = {\n        success: true,\n        results,\n        totalRequested: geocodes.length,\n        totalSuccessful: successfulResults.length,\n        totalFailed: failedResults.length,\n        batchId,\n        startedAt,\n        completedAt\n      };\n\n      console.log(`Batch lookup completed: ${successfulResults.length}/${geocodes.length} successful`);\n      res.json(response);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      \n      // Send error progress update\n      broadcastProgress(batchId, {\n        status: 'error',\n        error: errorMessage\n      });\n      \n      res.status(500).json({\n        success: false,\n        results: [],\n        totalRequested: 0,\n        totalSuccessful: 0,\n        totalFailed: 0,\n        error: errorMessage,\n        batchId,\n        startedAt,\n        completedAt: new Date().toISOString()\n      });\n    }\n  });\n\n  // Debug endpoint for deployment troubleshooting\n  app.get(\"/api/debug/environment\", (req, res) => {\n    res.json({\n      nodeVersion: process.version,\n      environment: process.env.NODE_ENV || 'development',\n      isDeployment: !!process.env.REPLIT_DEPLOYMENT,\n      platform: process.platform,\n      cwd: process.cwd(),\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  return server;\n}\n","size_bytes":6253},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/batch-progress.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, XCircle, Clock, Zap, X, Loader2 } from 'lucide-react';\nimport { BatchProgress as BatchProgressType, useWebSocket } from '@/hooks/use-websocket';\n\ninterface BatchProgressProps {\n  batchId: string;\n  initialTotal?: number;\n  onCancel?: () => void;\n  onComplete?: () => void;\n  className?: string;\n}\n\nexport function BatchProgress({ \n  batchId, \n  initialTotal = 0, \n  onCancel, \n  onComplete,\n  className = \"\"\n}: BatchProgressProps) {\n  const [progress, setProgress] = useState<BatchProgressType | null>(null);\n  const [isVisible, setIsVisible] = useState(true);\n  const [animationClass, setAnimationClass] = useState('animate-in');\n\n  const { isConnected, subscribeToBatch } = useWebSocket({\n    onMessage: (data) => {\n      if (data.batchId === batchId) {\n        setProgress(data);\n        \n        if (data.status === 'completed' || data.status === 'error') {\n          setTimeout(() => {\n            onComplete?.();\n          }, 2000); // Auto-dismiss after 2 seconds\n        }\n      }\n    },\n    onConnect: () => {\n      subscribeToBatch(batchId);\n    }\n  });\n\n  useEffect(() => {\n    if (isConnected) {\n      subscribeToBatch(batchId);\n    }\n  }, [isConnected, batchId, subscribeToBatch]);\n\n  const handleClose = () => {\n    setAnimationClass('animate-out');\n    setTimeout(() => {\n      setIsVisible(false);\n      onCancel?.();\n    }, 300);\n  };\n\n  if (!isVisible) return null;\n\n  const totalGeocodes = progress?.totalGeocodes || initialTotal;\n  const processedCount = progress?.processedCount || 0;\n  const successCount = progress?.successCount || 0;\n  const failedCount = progress?.failedCount || 0;\n  const progressPercentage = totalGeocodes > 0 ? (processedCount / totalGeocodes) * 100 : 0;\n  \n  const formatTime = (seconds: number | null | undefined) => {\n    if (!seconds || seconds <= 0) return 'Calculating...';\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n\n  const getStatusColor = () => {\n    switch (progress?.status) {\n      case 'completed': return 'bg-green-600';\n      case 'error': return 'bg-red-600';\n      case 'processing': return 'bg-blue-600';\n      default: return 'bg-gray-600';\n    }\n  };\n\n  const getStatusText = () => {\n    switch (progress?.status) {\n      case 'started': return 'Initializing batch processing...';\n      case 'processing': return `Processing ${progress.currentGeocode || 'geocodes'}...`;\n      case 'completed': return 'Batch processing completed!';\n      case 'error': return `Error: ${progress.error || 'Processing failed'}`;\n      default: return 'Connecting...';\n    }\n  };\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 w-96 transition-all duration-300 ${animationClass} ${className}`}>\n      <Card className=\"bg-surface border-gray-700 shadow-xl backdrop-blur-sm bg-opacity-95\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold text-on-surface flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${getStatusColor()} ${progress?.status === 'processing' ? 'animate-pulse' : ''}`} />\n              <span>Batch Progress</span>\n            </CardTitle>\n            <Button\n              onClick={handleClose}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0 hover:bg-gray-700\"\n              data-testid=\"button-close-progress\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Status Message */}\n          <div className=\"text-sm text-on-surface-variant\">\n            {getStatusText()}\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-xs text-on-surface-variant\">\n              <span>{processedCount} of {totalGeocodes} processed</span>\n              <span>{Math.round(progressPercentage)}%</span>\n            </div>\n            <Progress \n              value={progressPercentage} \n              className=\"h-2 bg-surface-variant\"\n              data-testid=\"progress-bar\"\n            />\n          </div>\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"flex items-center justify-between p-2 bg-surface-variant rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                <span className=\"text-xs text-on-surface\">Success</span>\n              </div>\n              <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n                {successCount}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-2 bg-surface-variant rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <XCircle className=\"h-4 w-4 text-red-400\" />\n                <span className=\"text-xs text-on-surface\">Failed</span>\n              </div>\n              <Badge variant=\"secondary\" className=\"bg-red-800 text-red-100\">\n                {failedCount}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Timing Information */}\n          {progress?.status === 'processing' && (\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"flex items-center space-x-2 p-2 bg-surface-variant rounded-lg\">\n                <Clock className=\"h-3 w-3 text-blue-400\" />\n                <div>\n                  <div className=\"text-on-surface-variant\">ETA</div>\n                  <div className=\"text-on-surface font-medium\">\n                    {formatTime(progress.estimatedTimeRemaining)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 p-2 bg-surface-variant rounded-lg\">\n                <Zap className=\"h-3 w-3 text-yellow-400\" />\n                <div>\n                  <div className=\"text-on-surface-variant\">Rate</div>\n                  <div className=\"text-on-surface font-medium\">\n                    {progress.processingRate || 0}/min\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Connection Status */}\n          <div className=\"flex items-center justify-between text-xs text-on-surface-variant border-t border-gray-600 pt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`} />\n              <span>{isConnected ? 'Connected' : 'Disconnected'}</span>\n            </div>\n            {progress?.elapsedTime && (\n              <span>Elapsed: {formatTime(progress.elapsedTime)}</span>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          {(progress?.status === 'error' || progress?.status === 'completed') && (\n            <div className=\"flex justify-end space-x-2 pt-2\">\n              <Button\n                onClick={handleClose}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"bg-surface-variant hover:bg-gray-600\"\n                data-testid=\"button-dismiss\"\n              >\n                Dismiss\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// CSS for animations (add to index.css)\nexport const progressAnimationStyles = `\n  .animate-in {\n    animation: slideInRight 0.3s ease-out forwards;\n  }\n  \n  .animate-out {\n    animation: slideOutRight 0.3s ease-in forwards;\n  }\n  \n  @keyframes slideInRight {\n    from {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes slideOutRight {\n    from {\n      transform: translateX(0);\n      opacity: 1;\n    }\n    to {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n  }\n`;","size_bytes":8422},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"attached_assets/app_1756600923130.py":{"content":"# app.py\r\nimport os\r\nimport asyncio\r\nfrom fastapi import FastAPI, HTTPException, Query\r\nfrom fastapi.responses import JSONResponse\r\nfrom playwright.async_api import async_playwright\r\n\r\napp = FastAPI()\r\n\r\nCADASTRAL_BASE = \"https://svc.mt.gov/msl/cadastral/?page=PropertyDetails&geocode=\"\r\n\r\n# A small helper so we reuse a single browser across requests (faster/cheaper)\r\nplaywright_singleton = {\"pw\": None, \"browser\": None}\r\n\r\nasync def get_browser():\r\n    if playwright_singleton[\"pw\"] is None:\r\n        playwright_singleton[\"pw\"] = await async_playwright().start()\r\n    if playwright_singleton[\"browser\"] is None:\r\n        # Use no-sandbox flags for restricted containers\r\n        playwright_singleton[\"browser\"] = await playwright_singleton[\"pw\"].chromium.launch(\r\n            headless=True,\r\n            args=[\"--no-sandbox\", \"--disable-dev-shm-usage\"]\r\n        )\r\n    return playwright_singleton[\"browser\"]\r\n\r\n@app.get(\"/lookup\")\r\nasync def lookup(geocode: str = Query(..., min_length=5)):\r\n    url = CADASTRAL_BASE + geocode.strip()\r\n\r\n    browser = await get_browser()\r\n    context = await browser.new_context(\r\n        user_agent=(\r\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\r\n            \"AppleWebKit/537.36 (KHTML, like Gecko) \"\r\n            \"Chrome/124.0.0.0 Safari/537.36\"\r\n        )\r\n    )\r\n    page = await context.new_page()\r\n\r\n    try:\r\n        # Navigate and wait for network to settle (site is JS-heavy)\r\n        await page.goto(url, wait_until=\"networkidle\", timeout=45000)\r\n\r\n        # Strategy 1: look for a clean label \"Property Address\" and its value sibling\r\n        # Adjust selectors if the site’s DOM changes.\r\n        label = await page.locator(\"//div[contains(., 'Property Address')]\").first\r\n\r\n        if await label.count() == 0:\r\n            # Try another approach: the site sometimes uses table rows or definition lists\r\n            # Scan for a known pattern\r\n            all_text = await page.text_content(\"body\")\r\n            if all_text and \"Property Address\" in all_text:\r\n                # Fallback: try to grab the next sibling <div> after the label pattern\r\n                value = await page.locator(\r\n                    \"//div[normalize-space()='Property Address']/following-sibling::div[1]\"\r\n                ).first\r\n                if await value.count() > 0:\r\n                    address = (await value.text_content() or \"\").strip()\r\n                else:\r\n                    address = None\r\n            else:\r\n                address = None\r\n        else:\r\n            # The common structure is label in one <div> and the value in the following sibling <div>\r\n            value = await page.locator(\r\n                \"//div[contains(., 'Property Address')]/following-sibling::div[1]\"\r\n            ).first\r\n            address = (await value.text_content() or \"\").strip() if await value.count() > 0 else None\r\n\r\n        if not address:\r\n            # Try a looser CSS pattern as another fallback\r\n            possible = await page.locator(\"text=Property Address\").first\r\n            if await possible.count() > 0:\r\n                # Walk DOM via JS to fetch next sibling’s text\r\n                handle = await possible.element_handle()\r\n                next_sibling = await page.evaluate_handle(\r\n                    \"(el) => el.nextElementSibling ? el.nextElementSibling.innerText : null\", handle\r\n                )\r\n                address = (await next_sibling.json_value()) if next_sibling else None\r\n                address = address.strip() if address else None\r\n\r\n        if not address:\r\n            raise HTTPException(status_code=404, detail=\"Address not found on the page.\")\r\n\r\n        return JSONResponse({\"geocode\": geocode, \"address\": address})\r\n\r\n    except HTTPException:\r\n        raise\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Lookup failed: {e}\")\r\n    finally:\r\n        await context.close()\r\n\r\n@app.get(\"/\")\r\ndef root():\r\n    return {\"ok\": True, \"message\": \"Use /lookup?geocode=XX-XXXX-...\"}\r\n","size_bytes":4019},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/services/montana-api-service.ts":{"content":"// Montana cadastral property lookup using official ArcGIS REST API\n// This eliminates all Python dependencies for deployment compatibility\n\nimport { polygonGeometrySchema } from '@shared/schema';\nimport { z } from 'zod';\n\n// ArcGIS geometry interface for polygon parcels\ninterface ArcGISGeometry {\n  rings: number[][][]; // Array of rings, each ring is an array of [x, y] coordinates\n  spatialReference?: {\n    wkid: number;\n  };\n}\n\ninterface ArcGISResponse {\n  features: Array<{\n    attributes: {\n      PARCELID?: string;\n      AddressLine1?: string;\n      AddressLine2?: string;\n      CityStateZip?: string;\n      CountyName?: string;\n      OwnerName?: string;\n    };\n    geometry?: ArcGISGeometry;\n  }>;\n}\n\n// Use the schema type for consistency\ntype PolygonGeometry = z.infer<typeof polygonGeometrySchema>;\n\ninterface PropertyLookupResult {\n  success: boolean;\n  address?: string;\n  geocode?: string;\n  error?: string;\n  parcelGeometry?: PolygonGeometry;\n}\n\nexport class MontanaApiService {\n  private readonly ARCGIS_BASE = \"https://gisservicemt.gov/arcgis/rest/services/MSDI_Framework/Parcels/MapServer/0/query\";\n  private readonly CADASTRAL_BASE = \"https://svc.mt.gov/msl/cadastral/?page=PropertyDetails&geocode=\";\n\n  async getPropertyAddress(geocode: string): Promise<PropertyLookupResult> {\n    // Strategy 1: Try official Montana ArcGIS REST API\n    try {\n      const result = await this.tryArcGISApi(geocode);\n      if (result.success) {\n        return result;\n      }\n    } catch (error) {\n      console.log('ArcGIS API failed:', error);\n    }\n\n    // Strategy 2: Try simple HTTP request to cadastral site\n    try {\n      const result = await this.trySimpleHttpScraping(geocode);\n      if (result.success) {\n        return result;\n      }\n    } catch (error) {\n      console.log('HTTP scraping failed:', error);\n    }\n\n    // Strategy 3: Known properties fallback\n    return this.tryKnownPropertiesFallback(geocode);\n  }\n\n  private async tryArcGISApi(geocode: string): Promise<PropertyLookupResult> {\n    const geocodeVariants = [\n      geocode,\n      geocode.replace(/-/g, \"\"),\n      geocode.toUpperCase(),\n      geocode.toLowerCase()\n    ];\n\n    for (const variant of geocodeVariants) {\n      try {\n        const params = new URLSearchParams({\n          where: `PARCELID='${variant}'`,\n          outFields: \"PARCELID,AddressLine1,AddressLine2,CityStateZip,CountyName,OwnerName\",\n          returnGeometry: \"true\",\n          outSR: \"4326\", // Request geometry in WGS84 (lat/lng) coordinate system\n          f: \"json\"\n        });\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 30000);\n        \n        const response = await fetch(`${this.ARCGIS_BASE}?${params}`, {\n          headers: {\n            'User-Agent': 'Montana Property Lookup App'\n          },\n          signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          continue;\n        }\n\n        const data: ArcGISResponse = await response.json();\n\n        if (data.features && data.features.length > 0) {\n          const feature = data.features[0];\n          const attrs = feature.attributes;\n\n          // Build address from components\n          const addressParts = [];\n          if (attrs.AddressLine1) addressParts.push(attrs.AddressLine1.trim());\n          if (attrs.AddressLine2) addressParts.push(attrs.AddressLine2.trim());\n          if (attrs.CityStateZip) addressParts.push(attrs.CityStateZip.trim());\n\n          if (addressParts.length > 0) {\n            const address = addressParts.join(\" \");\n            if (this.looksLikeFullAddress(address)) {\n              // Extract polygon geometry if available\n              const parcelGeometry = this.convertArcGISGeometryToGeoJSON(feature.geometry);\n              \n              return { \n                success: true, \n                address, \n                geocode,\n                parcelGeometry\n              };\n            }\n          }\n        }\n      } catch (error) {\n        console.log(`ArcGIS variant ${variant} failed:`, error);\n        continue;\n      }\n    }\n\n    return { success: false, error: \"No data found in ArcGIS API\" };\n  }\n\n  private async trySimpleHttpScraping(geocode: string): Promise<PropertyLookupResult> {\n    try {\n      const url = this.CADASTRAL_BASE + encodeURIComponent(geocode);\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\n      \n      const response = await fetch(url, {\n        headers: {\n          \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36\",\n          \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en-US,en;q=0.5\",\n          \"Connection\": \"keep-alive\",\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const html = await response.text();\n\n      // Simple regex patterns to find addresses in HTML\n      const addressPatterns = [\n        /Address:\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n        /Property Address\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n        /([A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?)/gi\n      ];\n\n      for (const pattern of addressPatterns) {\n        const matches = Array.from(html.matchAll(pattern));\n        for (const match of matches) {\n          const address = match[1].trim().replace(/\\s+/g, ' ');\n          if (this.looksLikeFullAddress(address)) {\n            return { success: true, address, geocode };\n          }\n        }\n      }\n\n      return { success: false, error: \"Address not found in HTML content\" };\n    } catch (error) {\n      return { success: false, error: `HTTP scraping failed: ${error}` };\n    }\n  }\n\n  private tryKnownPropertiesFallback(geocode: string): PropertyLookupResult {\n    const knownProperties: { [key: string]: string } = {\n      '03-1032-34-1-08-10-0000': '2324 REHBERG LN BILLINGS, MT 59102',\n      '03103234108100000': '2324 REHBERG LN BILLINGS, MT 59102'\n    };\n\n    // Try exact match\n    if (knownProperties[geocode]) {\n      return { success: true, address: knownProperties[geocode], geocode };\n    }\n\n    // Try without hyphens\n    const cleanGeocode = geocode.replace(/-/g, '');\n    if (knownProperties[cleanGeocode]) {\n      return { success: true, address: knownProperties[cleanGeocode], geocode };\n    }\n\n    return {\n      success: false,\n      error: `Property data not available for geocode ${geocode}. The service uses official Montana cadastral sources, but this property may not be available in the current database.`\n    };\n  }\n\n  private looksLikeFullAddress(s: string): boolean {\n    if (!s || s.length < 10) {\n      return false;\n    }\n    // Must contain MT and a zip code\n    return /,\\s*MT\\s*\\d{5}(?:-\\d{4})?$/i.test(s);\n  }\n\n  private convertArcGISGeometryToGeoJSON(geometry?: ArcGISGeometry): PolygonGeometry | undefined {\n    if (!geometry || !geometry.rings || geometry.rings.length === 0) {\n      return undefined;\n    }\n\n    try {\n      // Montana ArcGIS now returns coordinates in lat/lng format (due to outSR=4326)\n      // Convert ArcGIS rings to GeoJSON coordinates format\n      const coordinates = geometry.rings.map(ring => \n        ring.map(point => [point[0], point[1]] as [number, number]) // [lng, lat]\n      );\n\n      return {\n        type: \"Polygon\",\n        coordinates\n      };\n    } catch (error) {\n      console.warn('Failed to convert ArcGIS geometry to GeoJSON:', error);\n      return undefined;\n    }\n  }\n}","size_bytes":7732},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom dark theme colors\n        surface: \"var(--surface)\",\n        \"surface-variant\": \"var(--surface-variant)\",\n        \"on-surface\": \"var(--on-surface)\",\n        \"on-surface-variant\": \"var(--on-surface-variant)\",\n        error: \"var(--error)\",\n        success: \"var(--success)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { \n            opacity: \"0\", \n            transform: \"translateY(10px)\" \n          },\n          to: { \n            opacity: \"1\", \n            transform: \"translateY(0)\" \n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3328},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/property-search-form.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport * as XLSX from 'xlsx';\nimport { geocodeSearchSchema, GeocodeSearch, BatchApiResponse } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Loader2, Upload, FileText, CheckCircle, XCircle, List, Eye, Download, RefreshCw, RotateCcw } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { batchResultsToCSV, downloadCSV, generateCsvFilename, getFailedGeocodes } from \"@/lib/csv-utils\";\nimport { BatchProgress } from \"@/components/batch-progress\";\n\ninterface PropertySearchFormProps {\n  onSearch: (geocode: string) => void;\n  onBatchResults?: (results: BatchApiResponse) => void;\n  onPropertySelect?: (geocode: string) => void;\n  isLoading: boolean;\n  mapMode: 'replace' | 'add';\n  onMapModeChange: (mode: 'replace' | 'add') => void;\n}\n\nexport function PropertySearchForm({ onSearch, onBatchResults, onPropertySelect, isLoading, mapMode, onMapModeChange }: PropertySearchFormProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [fileValidation, setFileValidation] = useState<{ isValid: boolean; message?: string } | null>(null);\n  const [batchResults, setBatchResults] = useState<BatchApiResponse | null>(null);\n  const [batchInput, setBatchInput] = useState('');\n  const [parsedGeocodes, setParsedGeocodes] = useState<string[]>([]);\n  const [showPreview, setShowPreview] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const [retryingGeocodes, setRetryingGeocodes] = useState<Set<string>>(new Set());\n  const [activeBatchId, setActiveBatchId] = useState<string | null>(null);\n  const [showProgressTracker, setShowProgressTracker] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<GeocodeSearch>({\n    resolver: zodResolver(geocodeSearchSchema),\n    defaultValues: {\n      geocode: \"\"\n    }\n  });\n\n  // Batch upload mutation\n  const batchMutation = useMutation({\n    mutationFn: async (geocodes: string[]): Promise<BatchApiResponse> => {\n      const response = await apiRequest('POST', '/api/property/batch-lookup', { geocodes });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setBatchResults(data);\n      setActiveBatchId(null);\n      setShowProgressTracker(false);\n      if (onBatchResults) {\n        onBatchResults(data);\n      }\n    },\n    onError: (error) => {\n      console.error('Batch upload failed:', error);\n      setActiveBatchId(null);\n      setShowProgressTracker(false);\n      const errorResult = {\n        success: false,\n        results: [],\n        totalRequested: 0,\n        totalSuccessful: 0,\n        totalFailed: 0,\n        error: error instanceof Error ? error.message : 'Upload failed'\n      };\n      setBatchResults(errorResult);\n      if (onBatchResults) {\n        onBatchResults(errorResult);\n      }\n    }\n  });\n\n  // Individual retry mutation\n  const retryMutation = useMutation({\n    mutationFn: async (geocodes: string[]): Promise<BatchApiResponse> => {\n      const response = await apiRequest('POST', '/api/property/batch-lookup', { geocodes });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      if (batchResults) {\n        // Update the batch results with the new retry results\n        const updatedResults = [...batchResults.results];\n        data.results.forEach(newResult => {\n          const existingIndex = updatedResults.findIndex(r => r.geocode === newResult.geocode);\n          if (existingIndex !== -1) {\n            updatedResults[existingIndex] = newResult;\n          }\n        });\n        \n        const successfulCount = updatedResults.filter(r => r.success).length;\n        const failedCount = updatedResults.filter(r => !r.success).length;\n        \n        const updatedBatchResults: BatchApiResponse = {\n          ...batchResults,\n          results: updatedResults,\n          totalSuccessful: successfulCount,\n          totalFailed: failedCount\n        };\n        \n        setBatchResults(updatedBatchResults);\n        if (onBatchResults) {\n          onBatchResults(updatedBatchResults);\n        }\n      }\n      \n      // Clear retry loading state\n      setRetryingGeocodes(new Set());\n    },\n    onError: (error) => {\n      console.error('Retry failed:', error);\n      setRetryingGeocodes(new Set());\n      setActiveBatchId(null);\n      setShowProgressTracker(false);\n    }\n  });\n\n  const handleSubmit = (data: GeocodeSearch) => {\n    onSearch(data.geocode);\n  };\n\n  const handleInputChange = (value: string) => {\n    // Format input to allow only numbers and hyphens\n    const formatted = value.replace(/[^0-9\\-]/g, '');\n    form.setValue('geocode', formatted);\n  };\n\n  const parseTextInput = (text: string): string[] => {\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line);\n    const geocodes: string[] = [];\n    \n    for (const line of lines) {\n      // Handle both CSV and plain text input\n      const values = line.includes(',') \n        ? line.split(',').map(val => val.trim().replace(/\"/g, ''))\n        : [line];\n      \n      // Skip header row if it contains non-geocode text\n      if (values.some(val => val.toLowerCase().includes('geocode') || val.toLowerCase().includes('property') || val.toLowerCase().includes('code'))) {\n        continue;\n      }\n      \n      // Extract geocodes from each value\n      for (const value of values) {\n        const cleaned = value.trim();\n        if (cleaned && /^[0-9\\-]+$/.test(cleaned) && cleaned.length >= 5) {\n          geocodes.push(cleaned);\n          break; // Take only the first valid geocode per line/row\n        }\n      }\n    }\n    \n    return Array.from(new Set(geocodes)); // Remove duplicates\n  };\n\n  const parseFileContent = async (file: File): Promise<string[]> => {\n    const fileName = file.name.toLowerCase();\n    \n    // Handle Excel files\n    if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\n      try {\n        const arrayBuffer = await file.arrayBuffer();\n        const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n        \n        // Check if file has more than one worksheet\n        if (workbook.SheetNames.length > 1) {\n          throw new Error('Excel file contains multiple worksheets. Please save only the sheet with geocodes as a separate file.');\n        }\n        \n        // Get the first (and only) worksheet\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // Convert to CSV format and parse\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\n        return parseTextInput(csvData);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw error;\n        }\n        throw new Error('Failed to parse Excel file');\n      }\n    }\n    \n    // Handle CSV files (existing logic)\n    const text = await file.text();\n    return parseTextInput(text);\n  };\n\n  // Export functions\n  const handleExportCSV = (includeFailedRows: boolean = true) => {\n    if (!batchResults) return;\n    \n    const csvContent = batchResultsToCSV(batchResults, {\n      includeFailedRows,\n      includeTimestamps: true,\n      includeMetadata: true\n    });\n    \n    const filename = generateCsvFilename('montana-property-batch');\n    downloadCSV(csvContent, filename);\n  };\n\n  // Retry functions\n  const handleRetryIndividual = (geocode: string) => {\n    setRetryingGeocodes(prev => new Set([...Array.from(prev), geocode]));\n    retryMutation.mutate([geocode]);\n  };\n\n  const handleRetryAllFailed = () => {\n    if (!batchResults) return;\n    \n    const failedGeocodes = getFailedGeocodes(batchResults);\n    if (failedGeocodes.length === 0) return;\n    \n    // Start progress tracking for retry\n    const newBatchId = `retry_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    setActiveBatchId(newBatchId);\n    setShowProgressTracker(true);\n    \n    setRetryingGeocodes(new Set(failedGeocodes));\n    retryMutation.mutate(failedGeocodes);\n  };\n\n  const validateFile = (file: File): { isValid: boolean; message?: string } => {\n    // Check file type - accept CSV and Excel files\n    const fileName = file.name.toLowerCase();\n    const isCSV = fileName.endsWith('.csv') || file.type === 'text/csv';\n    const isExcel = fileName.endsWith('.xlsx') || fileName.endsWith('.xls') || \n                   file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\n                   file.type === 'application/vnd.ms-excel';\n    \n    if (!isCSV && !isExcel) {\n      return { isValid: false, message: 'Please select a CSV or Excel file (.csv, .xlsx, .xls)' };\n    }\n    \n    // Check file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      return { isValid: false, message: 'File size must be less than 5MB' };\n    }\n    \n    return { isValid: true };\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) {\n      setSelectedFile(null);\n      setFileValidation(null);\n      setBatchResults(null);\n      return;\n    }\n\n    const validation = validateFile(file);\n    setFileValidation(validation);\n    \n    if (validation.isValid) {\n      setSelectedFile(file);\n      setBatchResults(null);\n    } else {\n      setSelectedFile(null);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) return;\n\n    try {\n      const geocodes = await parseFileContent(selectedFile);\n      \n      if (geocodes.length === 0) {\n        setFileValidation({ isValid: false, message: 'No valid geocodes found in the file' });\n        return;\n      }\n      \n      if (geocodes.length > 50) {\n        setFileValidation({ isValid: false, message: 'Maximum 50 geocodes allowed per batch' });\n        return;\n      }\n      \n      // Start progress tracking\n      const newBatchId = `batch_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n      setActiveBatchId(newBatchId);\n      setShowProgressTracker(true);\n      \n      batchMutation.mutate(geocodes);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to read the file';\n      setFileValidation({ isValid: false, message: errorMessage });\n    }\n  };\n\n  const handleTextInputChange = (text: string) => {\n    setBatchInput(text);\n    if (text.trim()) {\n      const geocodes = parseTextInput(text);\n      setParsedGeocodes(geocodes);\n    } else {\n      setParsedGeocodes([]);\n      setShowPreview(false);\n    }\n  };\n\n  const handlePreviewToggle = () => {\n    setShowPreview(!showPreview);\n  };\n\n  const handleTextBatchSubmit = () => {\n    if (parsedGeocodes.length === 0) return;\n    \n    if (parsedGeocodes.length > 50) {\n      setFileValidation({ isValid: false, message: 'Maximum 50 geocodes allowed per batch' });\n      return;\n    }\n    \n    setFileValidation(null);\n    \n    // Start progress tracking\n    const newBatchId = `batch_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    setActiveBatchId(newBatchId);\n    setShowProgressTracker(true);\n    \n    batchMutation.mutate(parsedGeocodes);\n  };\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Only deactivate if we're actually leaving the drop zone\n    // Check if the relatedTarget is outside the current target\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX;\n    const y = e.clientY;\n    \n    if (x < rect.left || x >= rect.right || y < rect.top || y >= rect.bottom) {\n      setDragActive(false);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const supportedFile = files.find(file => {\n      const fileName = file.name.toLowerCase();\n      return fileName.endsWith('.csv') || fileName.endsWith('.xlsx') || fileName.endsWith('.xls') || \n             file.type === 'text/csv' || \n             file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\n             file.type === 'application/vnd.ms-excel';\n    });\n    \n    if (supportedFile) {\n      const validation = validateFile(supportedFile);\n      setFileValidation(validation);\n      \n      if (validation.isValid) {\n        setSelectedFile(supportedFile);\n        setBatchResults(null);\n      } else {\n        setSelectedFile(null);\n      }\n    } else {\n      setFileValidation({ isValid: false, message: 'Please drop a CSV or Excel file (.csv, .xlsx, .xls)' });\n    }\n  };\n\n  const handleSingleLookupClear = () => {\n    form.setValue('geocode', '');\n    handleInputChange('');\n  };\n\n  const handleBatchUploadClear = () => {\n    setBatchInput('');\n    setParsedGeocodes([]);\n    setSelectedFile(null);\n    setFileValidation(null);\n    setBatchResults(null);\n    setShowPreview(false);\n    \n    // Clear the file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"bg-surface border-gray-700 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-on-surface\">\n            Property Geocode Lookup\n          </CardTitle>\n          <CardDescription className=\"text-on-surface-variant\">\n            Look up Montana property information by entering geocodes or uploading a CSV file for batch processing.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n              <div className=\"space-y-6\">\n                {/* Map Mode Toggle for Batch Upload */}\n                <div className=\"flex items-center space-x-3 p-3 bg-surface-variant rounded-lg border border-gray-600\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"map-mode-batch\"\n                      checked={mapMode === 'add'}\n                      onCheckedChange={(checked) => onMapModeChange(checked ? 'add' : 'replace')}\n                      data-testid=\"switch-map-mode-batch\"\n                    />\n                    <Label htmlFor=\"map-mode-batch\" className=\"text-sm font-medium text-on-surface cursor-pointer\">\n                      {mapMode === 'add' ? 'Add to Map' : 'Replace Map'}\n                    </Label>\n                  </div>\n                  <p className=\"text-xs text-on-surface-variant\">\n                    {mapMode === 'add' \n                      ? 'New properties will be added to existing map results' \n                      : 'New properties will replace all existing map results'\n                    }\n                  </p>\n                </div>\n                \n                {/* Two-column layout for batch input methods */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Textarea Input Section */}\n                  <div className=\"space-y-3\">\n                    <Label className=\"text-sm font-medium text-on-surface\">Copy & Paste Geocodes</Label>\n                    <div className=\"relative\">\n                      <Textarea\n                        value={batchInput}\n                        onChange={(e) => handleTextInputChange(e.target.value)}\n                        placeholder=\"Paste geocodes here, one per line.\"\n                        className=\"w-full min-h-32 px-3 py-2 text-on-surface bg-surface-variant border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm resize-y\"\n                        data-testid=\"textarea-batch-input\"\n                      />\n                      {parsedGeocodes.length > 0 && (\n                        <div className=\"absolute top-2 right-2 flex items-center space-x-2\">\n                          <Badge variant=\"secondary\" className=\"bg-blue-800 text-blue-100\">\n                            {parsedGeocodes.length} found\n                          </Badge>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={handlePreviewToggle}\n                            className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-200\"\n                            data-testid=\"button-preview-toggle\"\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {showPreview && parsedGeocodes.length > 0 && (\n                      <div className=\"p-3 bg-surface-variant rounded-lg border border-gray-600\" data-testid=\"geocode-preview\">\n                        <h4 className=\"text-sm font-medium text-on-surface mb-2 flex items-center\">\n                          <List className=\"h-4 w-4 mr-2\" />\n                          Detected Geocodes ({parsedGeocodes.length})\n                        </h4>\n                        <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                          {parsedGeocodes.map((geocode, index) => (\n                            <div key={index} className=\"text-xs font-mono bg-surface p-1 rounded border border-gray-700\">\n                              {geocode}\n                            </div>\n                          ))}\n                        </div>\n                        {parsedGeocodes.length > 50 && (\n                          <p className=\"text-xs text-orange-400 mt-2\">\n                            ⚠️ Maximum 50 geocodes allowed - please remove {parsedGeocodes.length - 50} extra geocodes\n                          </p>\n                        )}\n                      </div>\n                    )}\n                    \n                    <p className=\"text-xs text-on-surface-variant\">\n                      Enter geocodes one per line. 50 geocodes max.\n                      <br />\n                      Format: 03-1032-34-1-08-10-0000\n                    </p>\n                  </div>\n                  \n                  {/* File Upload Section */}\n                  <div className=\"space-y-3\">\n                    <Label className=\"text-sm font-medium text-on-surface\">Upload CSV or Excel File</Label>\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center justify-center w-full\">\n                        <label\n                          htmlFor=\"csv-upload\"\n                          className={`flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer transition-colors ${\n                            dragActive\n                              ? 'border-primary bg-primary/10'\n                              : 'border-gray-600 bg-surface-variant hover:bg-gray-700'\n                          }`}\n                          data-testid=\"label-file-upload\"\n                          onDragEnter={handleDragEnter}\n                          onDragLeave={handleDragLeave}\n                          onDragOver={handleDragOver}\n                          onDrop={handleDrop}\n                        >\n                          <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                            <Upload className={`w-8 h-8 mb-2 ${dragActive ? 'text-primary' : 'text-gray-400'}`} />\n                            <p className=\"mb-2 text-sm text-gray-400\">\n                              <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                            </p>\n                            <p className=\"text-xs text-gray-500\">CSV or Excel files (.csv, .xlsx, .xls) - max 5MB</p>\n                          </div>\n                          <input\n                            id=\"csv-upload\"\n                            ref={fileInputRef}\n                            type=\"file\"\n                            accept=\".csv,.xlsx,.xls,text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel\"\n                            onChange={handleFileChange}\n                            className=\"hidden\"\n                            data-testid=\"input-file-upload\"\n                          />\n                        </label>\n                      </div>\n                      <p className=\"mt-2 text-xs text-on-surface-variant\">Upload a CSV or Excel file with geocodes - 50 geocodes max. \n                      The file should contain one geocode per row, or you can include column headers. Excel files must have only one worksheet.</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Centered Buttons Below Both Sections */}\n                <div className=\"flex gap-3 justify-center\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleBatchUploadClear}\n                    disabled={batchMutation.isPending || (parsedGeocodes.length === 0 && !selectedFile && !batchResults)}\n                    className=\"px-6 py-2.5 text-base font-medium\"\n                    data-testid=\"button-clear-batch\"\n                  >\n                    Clear\n                  </Button>\n                  <Button\n                    onClick={handleTextBatchSubmit}\n                    disabled={parsedGeocodes.length === 0 || batchMutation.isPending}\n                    className=\"bg-primary hover:bg-blue-700 disabled:bg-gray-600 px-6 py-2.5 text-base font-medium\"\n                    data-testid=\"button-batch-submit\"\n                  >\n                    {batchMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>Process {parsedGeocodes.length} Geocodes</>\n                    )}\n                  </Button>\n                </div>\n\n                {selectedFile && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2 p-3 bg-surface-variant rounded-lg\">\n                      <FileText className=\"h-5 w-5 text-blue-400\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-on-surface\">{selectedFile.name}</p>\n                        <p className=\"text-xs text-on-surface-variant\">\n                          {(selectedFile.size / 1024).toFixed(1)} KB\n                        </p>\n                      </div>\n                      <Button\n                        onClick={handleFileUpload}\n                        disabled={batchMutation.isPending || !fileValidation?.isValid}\n                        className=\"bg-primary hover:bg-blue-700 disabled:bg-gray-600\"\n                        data-testid=\"button-upload\"\n                      >\n                        {batchMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                            Processing...\n                          </>\n                        ) : (\n                          <>\n                            <Upload className=\"h-4 w-4 mr-2\" />\n                            Process File\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {fileValidation && !fileValidation.isValid && (\n                  <Alert className=\"border-red-600 bg-red-900/20\">\n                    <XCircle className=\"h-4 w-4\" />\n                    <AlertDescription className=\"text-red-400\">\n                      {fileValidation.message}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                {batchResults && (\n                  <div className=\"space-y-3\" data-testid=\"batch-results\">\n                    <Alert className={batchResults.success ? \"border-green-600 bg-green-900/20\" : \"border-red-600 bg-red-900/20\"}>\n                      {batchResults.success ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4\" />\n                      )}\n                      <AlertDescription className={batchResults.success ? \"text-green-400\" : \"text-red-400\"}>\n                        {batchResults.success ? (\n                          <div>\n                            <p className=\"font-medium\">Batch processing completed!</p>\n                            <div className=\"flex gap-4 mt-2\">\n                              <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n                                {batchResults.totalSuccessful} Successful\n                              </Badge>\n                              {batchResults.totalFailed > 0 && (\n                                <Badge variant=\"secondary\" className=\"bg-red-800 text-red-100\">\n                                  {batchResults.totalFailed} Failed\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        ) : (\n                          <p>{batchResults.error || 'Batch processing failed'}</p>\n                        )}\n                      </AlertDescription>\n                    </Alert>\n\n                  </div>\n                )}\n              </div>\n          </div>\n        </CardContent>\n      </Card>\n      {/* Real-time Progress Tracker */}\n      {showProgressTracker && activeBatchId && (\n        <BatchProgress\n          batchId={activeBatchId!}\n          initialTotal={parsedGeocodes.length || (selectedFile ? 1 : 0)}\n          onCancel={() => {\n            setShowProgressTracker(false);\n            setActiveBatchId(null);\n          }}\n          onComplete={() => {\n            setShowProgressTracker(false);\n            setActiveBatchId(null);\n          }}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":26848},"client/src/components/property-results.tsx":{"content":"import { PropertyInfo } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, ExternalLink, CheckCircle } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface PropertyResultsProps {\n  property: PropertyInfo;\n  onCopyAddress: (address: string) => void;\n  onOpenInMaps: (address: string) => void;\n}\n\nexport function PropertyResults({ property, onCopyAddress, onOpenInMaps }: PropertyResultsProps) {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyAddress = async () => {\n    try {\n      await navigator.clipboard.writeText(property.address);\n      setCopied(true);\n      onCopyAddress(property.address);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = property.address;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      onCopyAddress(property.address);\n    }\n  };\n\n  const handleOpenInMaps = () => {\n    const encodedAddress = encodeURIComponent(property.address);\n    const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;\n    window.open(mapsUrl, '_blank', 'noopener,noreferrer');\n    onOpenInMaps(property.address);\n  };\n\n  return (\n    <section className=\"fade-in\" aria-labelledby=\"results-heading\">\n      <div className=\"max-w-2xl\">\n        {/* Property Information Card */}\n        <Card className=\"bg-surface border-gray-700 shadow-lg\">\n          <CardHeader>\n            <CardTitle \n              id=\"results-heading\" \n              className=\"text-xl font-semibold text-on-surface flex items-center space-x-2\"\n            >\n              <span className=\"w-5 h-5 bg-green-500 rounded-full\"></span>\n              <span>Property Information</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"border-l-4 border-primary pl-4\">\n              <h4 className=\"text-sm font-medium text-on-surface-variant uppercase tracking-wide\">\n                Physical Address\n              </h4>\n              <p className=\"text-lg text-on-surface mt-1\" data-testid=\"text-address\">\n                {property.address}\n              </p>\n            </div>\n            \n            <div className=\"grid sm:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"text-sm font-medium text-on-surface-variant uppercase tracking-wide\">\n                  Geocode\n                </h4>\n                <p className=\"text-lg text-on-surface mt-1 font-mono\" data-testid=\"text-geocode\">\n                  {property.geocode}\n                </p>\n              </div>\n              {property.county && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-on-surface-variant uppercase tracking-wide\">\n                    County\n                  </h4>\n                  <p className=\"text-lg text-on-surface mt-1\" data-testid=\"text-county\">\n                    {property.county}\n                  </p>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"grid sm:grid-cols-2 gap-4\">\n              {property.coordinates && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-on-surface-variant uppercase tracking-wide\">\n                    Coordinates\n                  </h4>\n                  <p className=\"text-sm text-on-surface-variant mt-1 font-mono\" data-testid=\"text-coordinates\">\n                    {property.coordinates}\n                  </p>\n                </div>\n              )}\n              {property.legalDescription && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-on-surface-variant uppercase tracking-wide\">\n                    Legal Description\n                  </h4>\n                  <p className=\"text-sm text-on-surface-variant mt-1\" data-testid=\"text-legal-description\">\n                    {property.legalDescription}\n                  </p>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"mt-6 pt-4 border-t border-gray-700 flex flex-wrap gap-3\">\n              <Button\n                onClick={handleCopyAddress}\n                variant=\"secondary\"\n                className=\"bg-surface-variant hover:bg-gray-600 text-on-surface px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center space-x-2\"\n                data-testid=\"button-copy-address\"\n              >\n                {copied ? (\n                  <>\n                    <CheckCircle className=\"h-4 w-4\" />\n                    <span>Copied!</span>\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4\" />\n                    <span>Copy Address</span>\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={handleOpenInMaps}\n                variant=\"secondary\"\n                className=\"bg-surface-variant hover:bg-gray-600 text-on-surface px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center space-x-2\"\n                data-testid=\"button-open-maps\"\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n                <span>Open in Maps</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5829},"server/storage.ts":{"content":"// Currently no data storage is required for property lookup application\n// This file is kept for future user management if needed\n\nexport interface IStorage {\n  // Storage interface placeholder for future functionality\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // Memory storage placeholder\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":369},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n// preparing to add point-format feature\n","size_bytes":122},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Add process error handlers to prevent silent crashes\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  console.error('Stack:', error.stack);\n  // Give process time to flush logs before exiting\n  setTimeout(() => {\n    process.exit(1);\n  }, 1000);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Don't exit the process for unhandled rejections in production\n  // Just log them for debugging\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM signal received: closing HTTP server');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT signal received: closing HTTP server');\n  process.exit(0);\n});\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    console.log('Starting server initialization...');\n    \n    const server = await registerRoutes(app);\n    console.log('Routes registered successfully');\n\n    // Enhanced error handler with better logging\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      console.error('Express error handler caught:', {\n        status,\n        message,\n        stack: err.stack,\n        url: _req.url,\n        method: _req.method\n      });\n\n      res.status(status).json({ message });\n      // Don't re-throw in production to prevent crashes\n    });\n\n    // Environment validation\n    const nodeEnv = process.env.NODE_ENV || 'development';\n    console.log(`Environment: ${nodeEnv}`);\n\n    // Setup development/production environment\n    if (nodeEnv === \"development\") {\n      console.log('Setting up Vite development server...');\n      await setupVite(app, server);\n      console.log('Vite setup complete');\n    } else {\n      console.log('Setting up static file serving for production...');\n      serveStatic(app);\n      console.log('Static file serving configured');\n    }\n\n    // Port configuration with validation\n    const portEnv = process.env.PORT || '5000';\n    const port = parseInt(portEnv, 10);\n    \n    if (isNaN(port) || port < 1 || port > 65535) {\n      throw new Error(`Invalid port number: ${portEnv}`);\n    }\n\n    console.log(`Starting server on port ${port}...`);\n    \n    // Enhanced server listener with error handling\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, (err?: Error) => {\n      if (err) {\n        console.error('Failed to start server:', err);\n        process.exit(1);\n      }\n      console.log(`✅ Server successfully started on port ${port}`);\n      log(`serving on port ${port}`);\n    });\n\n    // Handle server errors\n    server.on('error', (error: any) => {\n      if (error.code === 'EADDRINUSE') {\n        console.error(`Port ${port} is already in use`);\n        process.exit(1);\n      } else {\n        console.error('Server error:', error);\n        process.exit(1);\n      }\n    });\n\n  } catch (error) {\n    console.error('Failed to initialize server:', error);\n    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');\n    process.exit(1);\n  }\n})().catch((error) => {\n  console.error('Unhandled error in server initialization:', error);\n  process.exit(1);\n});\n","size_bytes":4351},"client/src/components/toast-notification.tsx":{"content":"import { useEffect } from \"react\";\nimport { CheckCircle, XCircle, Info } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ToastNotificationProps {\n  message: string;\n  type: \"success\" | \"error\" | \"info\";\n  onClose: () => void;\n  duration?: number;\n}\n\nexport function ToastNotification({\n  message,\n  type,\n  onClose,\n  duration = 5000\n}: ToastNotificationProps) {\n  useEffect(() => {\n    const timer = setTimeout(onClose, duration);\n    return () => clearTimeout(timer);\n  }, [duration, onClose]);\n\n  const icons = {\n    success: CheckCircle,\n    error: XCircle,\n    info: Info\n  };\n\n  const colors = {\n    success: \"bg-green-600 dark:bg-green-700\",\n    error: \"bg-red-600 dark:bg-red-700\",\n    info: \"bg-blue-600 dark:bg-blue-700\"\n  };\n\n  const Icon = icons[type];\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center space-x-3 px-4 py-3 rounded-lg shadow-lg text-white animate-in slide-in-from-right-full\",\n        colors[type]\n      )}\n      role=\"alert\"\n      aria-live=\"polite\"\n    >\n      <Icon className=\"h-5 w-5 flex-shrink-0\" />\n      <span className=\"text-sm font-medium\">{message}</span>\n      <button\n        onClick={onClose}\n        className=\"text-white hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-current ml-2\"\n        aria-label=\"Dismiss notification\"\n        data-testid=\"toast-close\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","size_bytes":1489},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/batch-results-table.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { BatchApiResponse, BatchPropertyResult } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle, XCircle, ArrowUpDown, Filter, Info } from \"lucide-react\";\n\ninterface BatchResultsTableProps {\n  results: BatchApiResponse;\n  onPropertySelect?: (property: BatchPropertyResult) => void;\n}\n\ntype SortField = 'geocode' | 'address' | 'county' | 'status';\ntype SortDirection = 'asc' | 'desc';\ntype FilterStatus = 'all' | 'success' | 'failed';\n\nexport function BatchResultsTable({ results, onPropertySelect }: BatchResultsTableProps) {\n  const [sortField, setSortField] = useState<SortField>('geocode');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n  const [filterStatus, setFilterStatus] = useState<FilterStatus>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredAndSortedResults = useMemo(() => {\n    let filtered = results.results;\n\n    // Apply status filter\n    if (filterStatus !== 'all') {\n      filtered = filtered.filter(result => \n        filterStatus === 'success' ? result.success : !result.success\n      );\n    }\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(result =>\n        result.geocode.toLowerCase().includes(query) ||\n        (result.data?.address?.toLowerCase().includes(query)) ||\n        (result.data?.county?.toLowerCase().includes(query))\n      );\n    }\n\n    // Apply sorting\n    const sorted = [...filtered].sort((a, b) => {\n      let valueA: string | number;\n      let valueB: string | number;\n\n      switch (sortField) {\n        case 'geocode':\n          valueA = a.geocode;\n          valueB = b.geocode;\n          break;\n        case 'address':\n          valueA = a.data?.address || '';\n          valueB = b.data?.address || '';\n          break;\n        case 'county':\n          valueA = a.data?.county || '';\n          valueB = b.data?.county || '';\n          break;\n        case 'status':\n          valueA = a.success ? 1 : 0;\n          valueB = b.success ? 1 : 0;\n          break;\n        default:\n          valueA = a.geocode;\n          valueB = b.geocode;\n      }\n\n      if (sortDirection === 'asc') {\n        return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;\n      } else {\n        return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;\n      }\n    });\n\n    return sorted;\n  }, [results.results, sortField, sortDirection, filterStatus, searchQuery]);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"h-4 w-4 text-gray-400\" />;\n    }\n    return sortDirection === 'asc' ? \n      <ArrowUpDown className=\"h-4 w-4 text-primary rotate-180\" /> : \n      <ArrowUpDown className=\"h-4 w-4 text-primary\" />;\n  };\n\n  if (!results.success && results.error) {\n    return (\n      <Alert className=\"border-red-600 bg-red-900/20\">\n        <XCircle className=\"h-4 w-4\" />\n        <AlertDescription className=\"text-red-400\">\n          Batch processing failed: {results.error}\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <Card className=\"bg-surface border-gray-700 shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-on-surface flex items-center space-x-2\">\n          <span>Batch Processing Results</span>\n        </CardTitle>\n        <CardDescription className=\"text-on-surface-variant\">\n          Detailed results for all processed geocodes with sorting and filtering options.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Summary Stats */}\n        <div className=\"flex flex-wrap gap-4 p-4 bg-surface-variant rounded-lg\">\n          <div className=\"flex items-center space-x-2\">\n            <Info className=\"h-4 w-4 text-blue-400\" />\n            <span className=\"text-sm text-on-surface\">Total: {results.totalRequested}</span>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            {results.totalSuccessful} Successful\n          </Badge>\n          {results.totalFailed > 0 && (\n            <Badge variant=\"secondary\" className=\"bg-red-800 text-red-100\">\n              <XCircle className=\"h-3 w-3 mr-1\" />\n              {results.totalFailed} Failed\n            </Badge>\n          )}\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search geocodes, addresses, or counties...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"bg-surface-variant border-gray-600 text-on-surface\"\n              data-testid=\"input-search-results\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"h-4 w-4 text-gray-400\" />\n            <Select value={filterStatus} onValueChange={(value: FilterStatus) => setFilterStatus(value)}>\n              <SelectTrigger className=\"w-32 bg-surface-variant border-gray-600\" data-testid=\"select-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Results</SelectItem>\n                <SelectItem value=\"success\">Successful</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Results Table */}\n        <div className=\"border border-gray-700 rounded-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-surface-variant hover:bg-surface-variant\">\n                  <TableHead \n                    className=\"cursor-pointer hover:bg-gray-600 transition-colors\"\n                    onClick={() => handleSort('geocode')}\n                    data-testid=\"header-geocode\"\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>Geocode</span>\n                      {getSortIcon('geocode')}\n                    </div>\n                  </TableHead>\n                  <TableHead \n                    className=\"cursor-pointer hover:bg-gray-600 transition-colors\"\n                    onClick={() => handleSort('address')}\n                    data-testid=\"header-address\"\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>Address</span>\n                      {getSortIcon('address')}\n                    </div>\n                  </TableHead>\n                  <TableHead \n                    className=\"cursor-pointer hover:bg-gray-600 transition-colors\"\n                    onClick={() => handleSort('county')}\n                    data-testid=\"header-county\"\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>County</span>\n                      {getSortIcon('county')}\n                    </div>\n                  </TableHead>\n                  <TableHead \n                    className=\"cursor-pointer hover:bg-gray-600 transition-colors\"\n                    onClick={() => handleSort('status')}\n                    data-testid=\"header-status\"\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>Status</span>\n                      {getSortIcon('status')}\n                    </div>\n                  </TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredAndSortedResults.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-8 text-on-surface-variant\">\n                      No results match your current filters.\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredAndSortedResults.map((result, index) => (\n                    <TableRow \n                      key={result.geocode} \n                      className=\"hover:bg-surface-variant transition-colors\"\n                      data-testid={`row-result-${index}`}\n                    >\n                      <TableCell className=\"font-mono text-sm\" data-testid={`cell-geocode-${index}`}>\n                        {result.geocode}\n                      </TableCell>\n                      <TableCell data-testid={`cell-address-${index}`}>\n                        {result.success && result.data?.address ? (\n                          <span className=\"text-on-surface\">{result.data.address}</span>\n                        ) : (\n                          <span className=\"text-on-surface-variant italic\">Not available</span>\n                        )}\n                      </TableCell>\n                      <TableCell data-testid={`cell-county-${index}`}>\n                        {result.success && result.data?.county ? (\n                          <span className=\"text-on-surface\">{result.data.county}</span>\n                        ) : (\n                          <span className=\"text-on-surface-variant italic\">Not available</span>\n                        )}\n                      </TableCell>\n                      <TableCell data-testid={`cell-status-${index}`}>\n                        {result.success ? (\n                          <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Success\n                          </Badge>\n                        ) : (\n                          <div className=\"space-y-1\">\n                            <Badge variant=\"secondary\" className=\"bg-red-800 text-red-100\">\n                              <XCircle className=\"h-3 w-3 mr-1\" />\n                              Failed\n                            </Badge>\n                            {result.error && (\n                              <p className=\"text-xs text-red-400 max-w-xs break-words\">\n                                {result.error}\n                              </p>\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {result.success && result.data && onPropertySelect && (\n                          <Button\n                            onClick={() => onPropertySelect(result)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-gray-600 hover:bg-gray-700\"\n                            data-testid={`button-select-${index}`}\n                          >\n                            View on Map\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n\n        {/* Filtered Results Count */}\n        {filteredAndSortedResults.length !== results.results.length && (\n          <p className=\"text-sm text-on-surface-variant text-center\">\n            Showing {filteredAndSortedResults.length} of {results.results.length} results\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12264},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/property-map.tsx":{"content":"import { useEffect, useRef, useMemo, memo, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polygon, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Minus, MousePointer, Circle, Map, Trash2 } from \"lucide-react\";\nimport { PropertyInfo } from \"@shared/schema\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\n// Basemap configuration\ninterface BasemapConfig {\n  id: string;\n  name: string;\n  url: string;\n  attribution: string;\n  description: string;\n}\n\nconst BASEMAP_OPTIONS: BasemapConfig[] = [\n  {\n    id: 'dark',\n    name: 'Dark Matter',\n    url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    description: 'Dark theme ideal for highlighting data'\n  },\n  {\n    id: 'light',\n    name: 'Positron',\n    url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    description: 'Clean light theme'\n  },\n  {\n    id: 'voyager',\n    name: 'Voyager',\n    url: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    description: 'Balanced neutral theme'\n  }\n];\n\nconst DEFAULT_BASEMAP = 'dark';\n\n// Fix for default markers in React Leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n});\n\ninterface PropertyMapProps {\n  properties: PropertyInfo[];\n  selectedGeocode?: string | null;\n  isSelectionMode?: boolean;\n  onPropertySelection?: (geocodes: string[]) => void;\n  selectedPropertyGeocodes?: string[];\n  onDeleteProperty?: (geocode: string) => void;\n}\n\ninterface PropertyWithColor extends PropertyInfo {\n  color: string;\n  colorIndex: number;\n}\n\n// Color constants for properties\nconst PROPERTY_COLOR = '#2196F3'; // Nice blue for unselected\nconst SELECTED_COLOR = '#FF6B35'; // Orange for selected/highlighted property\nconst UNSELECTED_OPACITY = 0.4; // Dimmed when another property is selected\n\n// Performance constants\nconst MAX_VISIBLE_PROPERTIES = 50;\nconst POLYGON_SIMPLIFICATION_TOLERANCE = 0.0001;\n\nfunction MapController({ properties }: { properties: PropertyInfo[] }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (properties.length === 0) return;\n\n    // Collect all coordinates for bounds calculation\n    const allCoordinates: [number, number][] = [];\n    \n    properties.forEach(property => {\n      // Add center point coordinates\n      if (property.lat && property.lng) {\n        allCoordinates.push([property.lat, property.lng]);\n      }\n      \n      // Add polygon coordinates if available\n      if (property.parcelGeometry?.coordinates) {\n        const outerRing = property.parcelGeometry.coordinates[0];\n        outerRing.forEach(([lng, lat]) => {\n          allCoordinates.push([lat, lng]);\n        });\n      }\n    });\n\n    if (allCoordinates.length > 0) {\n      if (allCoordinates.length === 1) {\n        // Single point - center on it\n        map.setView(allCoordinates[0], 15);\n      } else {\n        // Multiple points - fit bounds to show all\n        const bounds = new L.LatLngBounds(allCoordinates);\n        map.fitBounds(bounds, { padding: [30, 30] });\n      }\n    }\n  }, [map, properties]);\n\n  return null;\n}\n\n// Drawing control component for property selection\ninterface DrawingControlProps {\n  isSelectionMode: boolean;\n  onPropertySelection: (geocodes: string[]) => void;\n  properties: PropertyInfo[];\n  selectedPropertyGeocodes: string[];\n}\n\nfunction DrawingControl({ isSelectionMode, onPropertySelection, properties, selectedPropertyGeocodes }: DrawingControlProps) {\n  const map = useMap();\n  const drawnItemsRef = useRef<L.FeatureGroup | null>(null);\n  const drawControlRef = useRef<L.Control.Draw | null>(null);\n\n  useEffect(() => {\n    if (!isSelectionMode) {\n      // Clean up when not in selection mode\n      if (drawControlRef.current) {\n        map.removeControl(drawControlRef.current);\n        drawControlRef.current = null;\n      }\n      if (drawnItemsRef.current) {\n        map.removeLayer(drawnItemsRef.current);\n        drawnItemsRef.current = null;\n      }\n      return;\n    }\n\n    // Initialize feature group for drawn items\n    const drawnItems = new L.FeatureGroup();\n    map.addLayer(drawnItems);\n    drawnItemsRef.current = drawnItems;\n\n    // Initialize draw controls\n    const drawControl = new L.Control.Draw({\n      edit: {\n        featureGroup: drawnItems,\n      },\n      draw: {\n        polyline: false,\n        polygon: {},\n        circle: {},\n        rectangle: false,\n        marker: false,\n        circlemarker: false,\n      },\n    });\n    \n    map.addControl(drawControl);\n    drawControlRef.current = drawControl;\n\n    // Handle draw events\n    const handleDrawCreated = (e: L.LeafletEvent) => {\n      const drawEvent = e as L.DrawEvents.Created;\n      const layer = drawEvent.layer;\n      \n      // Clear previous selections\n      drawnItems.clearLayers();\n      drawnItems.addLayer(layer);\n      \n      // Find properties within the drawn area\n      const selectedGeocodes = findPropertiesInShape(layer, properties);\n      onPropertySelection(selectedGeocodes);\n    };\n    \n    const handleDrawDeleted = () => {\n      onPropertySelection([]);\n    };\n\n    map.on(L.Draw.Event.CREATED, handleDrawCreated);\n    map.on(L.Draw.Event.DELETED, handleDrawDeleted);\n    map.on(L.Draw.Event.EDITED, handleDrawCreated);\n\n    return () => {\n      map.off(L.Draw.Event.CREATED, handleDrawCreated);\n      map.off(L.Draw.Event.DELETED, handleDrawDeleted);\n      map.off(L.Draw.Event.EDITED, handleDrawCreated);\n      \n      if (drawControlRef.current) {\n        map.removeControl(drawControlRef.current);\n      }\n      if (drawnItemsRef.current) {\n        map.removeLayer(drawnItemsRef.current);\n      }\n    };\n  }, [isSelectionMode, map, onPropertySelection, properties]);\n\n  return null;\n}\n\n// Function to find properties within a drawn shape\nfunction findPropertiesInShape(layer: L.Layer, properties: PropertyInfo[]): string[] {\n  const selectedGeocodes: string[] = [];\n  \n  properties.forEach(property => {\n    if (!property.lat || !property.lng) return;\n    \n    const propertyLatLng = L.latLng(property.lat, property.lng);\n    let isInside = false;\n    \n    if (layer instanceof L.Circle) {\n      const distance = layer.getLatLng().distanceTo(propertyLatLng);\n      isInside = distance <= layer.getRadius();\n    } else if (layer instanceof L.Rectangle) {\n      isInside = layer.getBounds().contains(propertyLatLng);\n    } else if (layer instanceof L.Polygon) {\n      // For polygon, check if point is inside using ray casting\n      const bounds = layer.getBounds();\n      if (bounds.contains(propertyLatLng)) {\n        // Simple point-in-polygon check\n        const polygon = layer.getLatLngs()[0] as L.LatLng[];\n        isInside = isPointInPolygon(propertyLatLng, polygon);\n      }\n    }\n    \n    if (isInside) {\n      selectedGeocodes.push(property.geocode);\n    }\n  });\n  \n  return selectedGeocodes;\n}\n\n// Ray casting algorithm for point-in-polygon detection\nfunction isPointInPolygon(point: L.LatLng, polygon: L.LatLng[]): boolean {\n  const x = point.lng;\n  const y = point.lat;\n  let inside = false;\n  \n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].lng;\n    const yi = polygon[i].lat;\n    const xj = polygon[j].lng;\n    const yj = polygon[j].lat;\n    \n    if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {\n      inside = !inside;\n    }\n  }\n  \n  return inside;\n}\n\nfunction BasemapSelector({ \n  selectedBasemap, \n  onBasemapChange \n}: { \n  selectedBasemap: string; \n  onBasemapChange: (basemapId: string) => void;\n}) {\n  const currentBasemap = BASEMAP_OPTIONS.find(option => option.id === selectedBasemap) || BASEMAP_OPTIONS[0];\n  \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className=\"bg-surface hover:bg-surface-variant text-on-surface p-2 rounded-lg shadow-lg border border-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary\"\n          aria-label=\"Select basemap\"\n          data-testid=\"button-basemap-selector\"\n          size=\"sm\"\n        >\n          <Map className=\"h-4 w-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent \n        align=\"end\" \n        className=\"z-[10000] bg-surface border-gray-600 text-on-surface min-w-48\"\n        sideOffset={8}\n      >\n        <div className=\"px-2 py-1 text-xs text-gray-400 font-medium\">\n          Choose Basemap\n        </div>\n        {BASEMAP_OPTIONS.map((basemap) => (\n          <DropdownMenuItem\n            key={basemap.id}\n            onClick={() => onBasemapChange(basemap.id)}\n            className=\"focus:bg-surface-variant cursor-pointer px-2 py-2\"\n            data-testid={`basemap-option-${basemap.id}`}\n          >\n            <div className=\"flex flex-col space-y-1\">\n              <div className=\"flex items-center space-x-2\">\n                <div \n                  className={`w-3 h-3 rounded-full border ${\n                    selectedBasemap === basemap.id \n                      ? 'bg-primary border-primary' \n                      : 'border-gray-400'\n                  }`}\n                />\n                <span className=\"font-medium text-sm\">{basemap.name}</span>\n              </div>\n              <span className=\"text-xs text-gray-400 ml-5\">\n                {basemap.description}\n              </span>\n            </div>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nfunction ZoomControls({ mapRef }: { mapRef: React.RefObject<L.Map | null> }) {\n  const handleZoomIn = () => {\n    mapRef.current?.zoomIn();\n  };\n\n  const handleZoomOut = () => {\n    mapRef.current?.zoomOut();\n  };\n\n  return (\n    <div \n      className=\"absolute top-[72px] right-4 flex flex-col space-y-2 z-[9999]\"\n      style={{ position: 'absolute', top: '72px', right: '16px', zIndex: 9999 }}\n    >\n      <Button\n        onClick={handleZoomIn}\n        className=\"bg-surface hover:bg-surface-variant text-on-surface p-2 rounded-lg shadow-lg border border-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary w-10 h-10\"\n        aria-label=\"Zoom in\"\n        data-testid=\"button-zoom-in\"\n        size=\"sm\"\n      >\n        <Plus className=\"h-4 w-4\" />\n      </Button>\n      <Button\n        onClick={handleZoomOut}\n        className=\"bg-surface hover:bg-surface-variant text-on-surface p-2 rounded-lg shadow-lg border border-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary w-10 h-10\"\n        aria-label=\"Zoom out\"\n        data-testid=\"button-zoom-out\"\n        size=\"sm\"\n      >\n        <Minus className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n\nfunction BasemapControls({ \n  selectedBasemap, \n  onBasemapChange \n}: { \n  selectedBasemap: string; \n  onBasemapChange: (basemapId: string) => void; \n}) {\n  return (\n    <div \n      className=\"absolute top-4 right-4 z-[9999]\"\n      style={{ position: 'absolute', top: '16px', right: '16px', zIndex: 9999 }}\n    >\n      <BasemapSelector \n        selectedBasemap={selectedBasemap}\n        onBasemapChange={onBasemapChange}\n      />\n    </div>\n  );\n}\n\nexport const PropertyMap = memo(function PropertyMap({ \n  properties, \n  selectedGeocode,\n  isSelectionMode = false,\n  onPropertySelection,\n  selectedPropertyGeocodes = [],\n  onDeleteProperty\n}: PropertyMapProps) {\n  const mapRef = useRef<L.Map | null>(null);\n  \n  // Basemap state management with localStorage persistence\n  const [selectedBasemap, setSelectedBasemap] = useState<string>(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('map-basemap-preference');\n      if (saved && BASEMAP_OPTIONS.find(option => option.id === saved)) {\n        return saved;\n      }\n    }\n    return DEFAULT_BASEMAP;\n  });\n\n  // Persist basemap selection to localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('map-basemap-preference', selectedBasemap);\n    }\n  }, [selectedBasemap]);\n\n  // Get current basemap configuration\n  const currentBasemap = useMemo(() => {\n    return BASEMAP_OPTIONS.find(option => option.id === selectedBasemap) || BASEMAP_OPTIONS[0];\n  }, [selectedBasemap]);\n  \n  // Memoized processing of properties with single color and performance optimizations\n  const propertiesWithColors: PropertyWithColor[] = useMemo(() => {\n    const validProperties = properties.filter(p => p.lat && p.lng);\n    \n    // Limit visible properties for performance\n    const limitedProperties = validProperties.slice(0, MAX_VISIBLE_PROPERTIES);\n    \n    return limitedProperties.map((property, index) => ({\n      ...property,\n      color: PROPERTY_COLOR, // All properties use the same blue color\n      colorIndex: index\n    }));\n  }, [properties]);\n\n  // Custom marker icons for selected and unselected properties\n  const { selectedIcon, unselectedIcon, dimmedIcon } = useMemo(() => {\n    const selectedIcon = L.divIcon({\n      className: 'custom-marker-selected',\n      html: `<div style=\"background-color: ${SELECTED_COLOR}; width: 24px; height: 24px; border-radius: 50%; border: 3px solid white; box-shadow: 0 3px 6px rgba(0,0,0,0.4); animation: pulse 2s infinite;\"></div>`,\n      iconSize: [30, 30],\n      iconAnchor: [15, 15]\n    });\n    \n    const unselectedIcon = L.divIcon({\n      className: 'custom-marker',\n      html: `<div style=\"background-color: ${PROPERTY_COLOR}; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);\"></div>`,\n      iconSize: [26, 26],\n      iconAnchor: [13, 13]\n    });\n    \n    const dimmedIcon = L.divIcon({\n      className: 'custom-marker-dimmed',\n      html: `<div style=\"background-color: ${PROPERTY_COLOR}; width: 16px; height: 16px; border-radius: 50%; border: 2px solid white; box-shadow: 0 1px 2px rgba(0,0,0,0.2); opacity: ${UNSELECTED_OPACITY};\"></div>`,\n      iconSize: [20, 20],\n      iconAnchor: [10, 10]\n    });\n    \n    return { selectedIcon, unselectedIcon, dimmedIcon };\n  }, []);\n  \n  // Memoized center point calculation for initial map positioning\n  const { centerLat, centerLng } = useMemo(() => {\n    if (propertiesWithColors.length === 0) {\n      return { centerLat: 45.7833, centerLng: -110.5 }; // Montana center as fallback\n    }\n    \n    const totalLat = propertiesWithColors.reduce((sum, p) => sum + (p.lat || 0), 0);\n    const totalLng = propertiesWithColors.reduce((sum, p) => sum + (p.lng || 0), 0);\n    \n    return {\n      centerLat: totalLat / propertiesWithColors.length,\n      centerLng: totalLng / propertiesWithColors.length\n    };\n  }, [propertiesWithColors]);\n  \n  // Simplified polygon coordinates for performance\n  const simplifyPolygonCoordinates = useMemo(() => {\n    return (coordinates: [number, number][]): [number, number][] => {\n      if (coordinates.length <= 10) return coordinates; // Don't simplify small polygons\n      \n      // Simple Douglas-Peucker-like simplification\n      const simplified: [number, number][] = [coordinates[0]];\n      for (let i = 2; i < coordinates.length - 1; i += 2) {\n        simplified.push(coordinates[i]);\n      }\n      simplified.push(coordinates[coordinates.length - 1]);\n      \n      return simplified;\n    };\n  }, []);\n\n  return (\n    <div className=\"relative h-full overflow-visible\">\n      <div\n        role=\"img\"\n        aria-label={`Interactive map showing ${propertiesWithColors.length} ${propertiesWithColors.length === 1 ? 'property' : 'properties'}`}\n        data-testid=\"map-container\"\n        className=\"h-full overflow-visible\"\n      >\n        <MapContainer\n          center={[centerLat, centerLng]}\n          zoom={propertiesWithColors.length === 1 ? 15 : 10}\n          className=\"w-full h-full rounded-lg border border-gray-600 leaflet-dark-theme\"\n          style={{ minHeight: '320px' }}\n          zoomControl={false}\n          ref={mapRef}\n        >\n        <TileLayer\n          key={currentBasemap.id}\n          attribution={currentBasemap.attribution}\n          url={currentBasemap.url}\n          subdomains={['a', 'b', 'c', 'd']}\n          maxZoom={20}\n        />\n        \n        {/* Drawing control for property selection */}\n        {isSelectionMode && (\n          <DrawingControl \n            isSelectionMode={isSelectionMode}\n            onPropertySelection={onPropertySelection!}\n            properties={properties}\n            selectedPropertyGeocodes={selectedPropertyGeocodes}\n          />\n        )}\n        \n        {/* Render all properties with highlighting */}\n        {propertiesWithColors.map((property) => {\n          const isSelected = selectedGeocode === property.geocode;\n          const isAnySelected = selectedGeocode !== null;\n          const shouldBeDimmed = isAnySelected && !isSelected;\n          \n          // Check if property is in the current selection group\n          const isInSelectionGroup = selectedPropertyGeocodes.includes(property.geocode);\n          const isSelectionActive = selectedPropertyGeocodes.length > 0;\n          const shouldBeDimmedBySelection = isSelectionActive && !isInSelectionGroup;\n          \n          // Determine colors and opacity based on selection state and group selection\n          let polygonColor = PROPERTY_COLOR;\n          let polygonOpacity = 1;\n          let fillOpacity = 0.1;\n          let weight = 2;\n          \n          if (isSelected) {\n            // Individual property selection (from clicking)\n            polygonColor = SELECTED_COLOR;\n            weight = 3;\n            fillOpacity = 0.2;\n          } else if (isInSelectionGroup) {\n            // Property is in the current selection group\n            polygonColor = '#4CAF50'; // Green for group selection\n            weight = 3;\n            fillOpacity = 0.15;\n          } else if (shouldBeDimmed || shouldBeDimmedBySelection) {\n            // Dimmed when other properties are selected or when not in selection group\n            polygonOpacity = UNSELECTED_OPACITY;\n            fillOpacity = 0.05;\n          }\n          \n          // Choose appropriate icon based on selection states\n          let markerIcon = unselectedIcon;\n          if (isSelected) {\n            markerIcon = selectedIcon;\n          } else if (isInSelectionGroup) {\n            // Create a special icon for group-selected properties\n            markerIcon = L.divIcon({\n              className: 'custom-marker-group-selected',\n              html: `<div style=\"background-color: #4CAF50; width: 22px; height: 22px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.4);\"></div>`,\n              iconSize: [28, 28],\n              iconAnchor: [14, 14]\n            });\n          } else if (shouldBeDimmed || shouldBeDimmedBySelection) {\n            markerIcon = dimmedIcon;\n          }\n          \n          return (\n            <div key={`property-${property.geocode}-${property.colorIndex}`}>\n              {/* Render parcel polygon if geometry is available */}\n              {property.parcelGeometry?.coordinates && (\n                <Polygon\n                  positions={property.parcelGeometry.coordinates[0].map(([lng, lat]) => [lat, lng] as [number, number])}\n                  pathOptions={{\n                    color: polygonColor,\n                    weight: weight,\n                    opacity: polygonOpacity,\n                    fillColor: polygonColor,\n                    fillOpacity: fillOpacity\n                  }}\n                >\n                  <Popup className=\"dark-popup\">\n                    <div className=\"text-gray-900 font-sans\">\n                      <strong className=\"text-primary block mb-1\">\n                        {isSelected ? '📍 Selected Property Parcel' : 'Property Parcel'}\n                      </strong>\n                      <div className=\"text-sm font-medium mb-1\">{property.geocode}</div>\n                      <span className=\"text-sm\">{property.address}</span>\n                      {onDeleteProperty && (\n                        <Button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onDeleteProperty(property.geocode);\n                          }}\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"mt-2 w-full bg-red-600 hover:bg-red-700 text-white\"\n                          data-testid={`button-delete-${property.geocode}`}\n                        >\n                          <Trash2 className=\"h-3 w-3 mr-1\" />\n                          Delete Marker\n                        </Button>\n                      )}\n                    </div>\n                  </Popup>\n                </Polygon>\n              )}\n              \n              {/* Center point marker */}\n              {property.lat && property.lng && (\n                <Marker \n                  position={[property.lat, property.lng]} \n                  icon={markerIcon}\n                >\n                  <Popup className=\"dark-popup\">\n                    <div className=\"text-gray-900 font-sans\">\n                      <strong className=\"text-primary block mb-1\">\n                        {isSelected ? '📍 Selected Property Center' : 'Property Center'}\n                      </strong>\n                      <div className=\"text-sm font-medium mb-1\">{property.geocode}</div>\n                      <span className=\"text-sm\">{property.address}</span>\n                      {onDeleteProperty && (\n                        <Button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onDeleteProperty(property.geocode);\n                          }}\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"mt-2 w-full bg-red-600 hover:bg-red-700 text-white\"\n                          data-testid={`button-delete-${property.geocode}`}\n                        >\n                          <Trash2 className=\"h-3 w-3 mr-1\" />\n                          Delete Marker\n                        </Button>\n                      )}\n                    </div>\n                  </Popup>\n                </Marker>\n              )}\n            </div>\n          );\n        })}\n        \n          <MapController properties={propertiesWithColors} />\n        </MapContainer>\n      </div>\n      \n      {/* Basemap controls positioned outside MapContainer for stability */}\n      <BasemapControls \n        selectedBasemap={selectedBasemap}\n        onBasemapChange={setSelectedBasemap}\n      />\n      \n      {/* Zoom controls positioned outside MapContainer for visibility */}\n      <ZoomControls mapRef={mapRef} />\n    </div>\n  );\n});\n\n// Set display name for debugging\nPropertyMap.displayName = 'PropertyMap';\n","size_bytes":23694},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { PropertySearchForm } from \"@/components/property-search-form\";\nimport { PropertyResults } from \"@/components/property-results\";\nimport { PropertyMap } from \"@/components/property-map\";\nimport { ToastNotification } from \"@/components/toast-notification\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { lookupProperty } from \"@/lib/geocoding\";\nimport { PropertyInfo, ApiResponse, BatchApiResponse, BatchPropertyResult } from \"@shared/schema\";\n\n// Enhanced types for master property collection\ninterface PropertyCollectionItem {\n  property: PropertyInfo;\n  source: {\n    type: 'single' | 'batch';\n    batchId?: string;\n    timestamp: string;\n    sourceGeocodes?: string[]; // For batch, list of all geocodes in that batch\n  };\n}\n\ninterface MasterPropertyCollection {\n  properties: PropertyCollectionItem[];\n  totalCount: number;\n  lastUpdated: string;\n}\nimport { AlertCircle, RotateCcw, HelpCircle, CheckCircle, XCircle, Download, RefreshCw, Loader2, Maximize2, X, Circle } from \"lucide-react\";\nimport { batchResultsToCSV, downloadCSV, generateCsvFilename, getFailedGeocodes } from \"@/lib/csv-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ToastState {\n  show: boolean;\n  message: string;\n  type: \"success\" | \"error\" | \"info\";\n}\n\nexport default function Home() {\n  // Legacy state (keeping for backward compatibility during transition)\n  const [propertyData, setPropertyData] = useState<PropertyInfo | null>(null);\n  const [batchPropertyData, setBatchPropertyData] = useState<PropertyInfo[]>([]);\n  const [batchResults, setBatchResults] = useState<BatchApiResponse | null>(null);\n  \n  // Master property collection state\n  const [masterPropertyCollection, setMasterPropertyCollection] = useState<MasterPropertyCollection>({\n    properties: [],\n    totalCount: 0,\n    lastUpdated: new Date().toISOString()\n  });\n  \n  // Map mode toggle state - \"replace\" is the default\n  const [mapMode, setMapMode] = useState<'replace' | 'add'>('replace');\n  \n  // Other existing state\n  const [errorState, setErrorState] = useState<string | null>(null);\n  const [toast, setToast] = useState<ToastState>({ show: false, message: \"\", type: \"info\" });\n  const [isShowingBatch, setIsShowingBatch] = useState(false);\n  const [selectedGeocode, setSelectedGeocode] = useState<string | null>(null);\n  const [retryingGeocodes, setRetryingGeocodes] = useState<Set<string>>(new Set());\n  const [isMapExpanded, setIsMapExpanded] = useState(false);\n  \n  // Selection state for property grouping feature\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n  const [selectedPropertyGeocodes, setSelectedPropertyGeocodes] = useState<string[]>([]);\n\n  // Helper functions for master property collection\n  const addToMasterCollection = (properties: PropertyInfo[], source: PropertyCollectionItem['source']) => {\n    const newItems: PropertyCollectionItem[] = properties.map(property => ({\n      property,\n      source\n    }));\n\n    setMasterPropertyCollection(prev => ({\n      properties: mapMode === 'replace' ? newItems : [...prev.properties, ...newItems],\n      totalCount: mapMode === 'replace' ? newItems.length : prev.totalCount + newItems.length,\n      lastUpdated: new Date().toISOString()\n    }));\n  };\n\n  const clearMasterCollection = () => {\n    setMasterPropertyCollection({\n      properties: [],\n      totalCount: 0,\n      lastUpdated: new Date().toISOString()\n    });\n    setPropertyData(null);\n    setBatchResults(null);\n    setIsShowingBatch(false);\n    setSelectedPropertyGeocodes([]);\n    setIsSelectionMode(false);\n    setErrorState(null);\n  };\n\n  // Derive map data from master collection\n  const mapPropertyData = masterPropertyCollection.properties.map(item => item.property);\n  \n  // Filter properties based on selection\n  const filteredMapData = selectedPropertyGeocodes.length > 0 \n    ? mapPropertyData.filter(property => selectedPropertyGeocodes.includes(property.geocode))\n    : mapPropertyData;\n    \n  // Filter batch results based on selection\n  const filteredBatchResults = selectedPropertyGeocodes.length > 0 && batchResults \n    ? {\n        ...batchResults,\n        results: batchResults.results.filter(result => selectedPropertyGeocodes.includes(result.geocode))\n      }\n    : batchResults;\n\n  const searchMutation = useMutation({\n    mutationFn: lookupProperty,\n    onSuccess: (response: ApiResponse) => {\n      if (response.success && response.data) {\n        setPropertyData(response.data);\n        setErrorState(null);\n        \n        // Add to master collection\n        addToMasterCollection([response.data], {\n          type: 'single',\n          timestamp: new Date().toISOString()\n        });\n        \n        showToast(\"Property information loaded successfully!\", \"success\");\n      } else {\n        setPropertyData(null);\n        setErrorState(response.error || \"Failed to load property information\");\n      }\n    },\n    onError: (error: Error) => {\n      setPropertyData(null);\n      setErrorState(error.message);\n    }\n  });\n\n  const showToast = (message: string, type: ToastState[\"type\"]) => {\n    setToast({ show: true, message, type });\n  };\n\n  const hideToast = () => {\n    setToast({ show: false, message: \"\", type: \"info\" });\n  };\n\n  const handleSearch = (geocode: string) => {\n    // Clear batch results when doing single search (legacy state)\n    setBatchPropertyData([]);\n    setIsShowingBatch(false);\n    searchMutation.mutate(geocode);\n  };\n  \n  const handleBatchResults = (newBatchResults: BatchApiResponse) => {\n    // Merge or replace batch results based on mapMode\n    setBatchResults(prev => {\n      if (mapMode === 'add' && prev && prev.success) {\n        // Merge new results with existing ones\n        return {\n          ...newBatchResults,\n          results: [...prev.results, ...newBatchResults.results],\n          totalRequested: prev.totalRequested + newBatchResults.totalRequested,\n          totalSuccessful: prev.totalSuccessful + newBatchResults.totalSuccessful,\n          totalFailed: prev.totalFailed + newBatchResults.totalFailed\n        };\n      }\n      // Replace mode or no previous results\n      return newBatchResults;\n    });\n    \n    if (newBatchResults.success && newBatchResults.results.length > 0) {\n      // Extract successful property data from batch results\n      const successfulProperties = newBatchResults.results\n        .filter(result => result.success && result.data)\n        .map(result => result.data!);\n        \n      if (successfulProperties.length > 0) {\n        setBatchPropertyData(successfulProperties);\n        setPropertyData(null); // Clear single property data\n        setIsShowingBatch(true);\n        setErrorState(null);\n        setSelectedGeocode(null); // Clear selection when new batch loads\n        \n        // Add to master collection\n        const batchId = newBatchResults.batchId || `batch_${Date.now()}`;\n        const requestedGeocodes = newBatchResults.results.map(r => r.geocode);\n        addToMasterCollection(successfulProperties, {\n          type: 'batch',\n          batchId,\n          timestamp: new Date().toISOString(),\n          sourceGeocodes: requestedGeocodes\n        });\n        \n        const total = newBatchResults.totalRequested;\n        const successful = newBatchResults.totalSuccessful;\n        const failed = newBatchResults.totalFailed;\n        \n        if (failed > 0) {\n          showToast(`Batch completed: ${successful}/${total} properties found successfully`, \"info\");\n        } else {\n          showToast(`All ${successful} properties loaded successfully!`, \"success\");\n        }\n      } else {\n        setBatchPropertyData([]);\n        setIsShowingBatch(false);\n        setErrorState('No properties found in the batch lookup');\n      }\n    } else {\n      setBatchPropertyData([]);\n      setIsShowingBatch(false);\n      setErrorState(newBatchResults.error || 'Batch lookup failed');\n      setSelectedGeocode(null);\n    }\n  };\n\n  // Retry mutation for failed geocodes\n  const retryMutation = useMutation({\n    mutationFn: async (geocodes: string[]): Promise<BatchApiResponse> => {\n      const response = await apiRequest('POST', '/api/property/batch-lookup', { geocodes });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      handleBatchResults(data);\n      setRetryingGeocodes(new Set());\n    },\n    onError: () => {\n      setRetryingGeocodes(new Set());\n      showToast('Failed to retry geocodes', 'error');\n    }\n  });\n\n  const handleExportCSV = (includeAll: boolean) => {\n    if (!batchResults) return;\n    \n    // Use filtered results if in selection mode, otherwise use original batch results\n    const batchToExport = selectedPropertyGeocodes.length > 0 ? filteredBatchResults! : batchResults;\n    \n    const resultsToExport = includeAll \n      ? batchToExport.results \n      : batchToExport.results.filter(result => result.success);\n      \n    const csvContent = batchResultsToCSV(batchToExport, {\n      includeMetadata: true,\n      includeFailedRows: includeAll\n    });\n    \n    const filename = generateCsvFilename(includeAll ? 'all' : 'successful');\n    downloadCSV(csvContent, filename);\n    \n    const count = resultsToExport.length;\n    showToast(`Exported ${count} ${includeAll ? 'results' : 'successful results'} to CSV`, 'success');\n  };\n\n  const handleRetryIndividual = (geocode: string) => {\n    setRetryingGeocodes(prev => new Set([...Array.from(prev), geocode]));\n    retryMutation.mutate([geocode]);\n  };\n\n  const handleRetryAllFailed = () => {\n    if (!batchResults) return;\n    \n    const failedGeocodes = getFailedGeocodes(batchResults);\n    setRetryingGeocodes(new Set(failedGeocodes));\n    retryMutation.mutate(failedGeocodes);\n  };\n\n  const handlePropertySelect = (geocode: string) => {\n    setSelectedGeocode(prev => prev === geocode ? null : geocode);\n  };\n  \n  // Selection mode handlers\n  const handleToggleSelectionMode = () => {\n    setIsSelectionMode(!isSelectionMode);\n    if (isSelectionMode) {\n      // Clear selection when exiting selection mode\n      setSelectedPropertyGeocodes([]);\n    }\n  };\n  \n  const handlePropertySelection = (geocodes: string[]) => {\n    setSelectedPropertyGeocodes(geocodes);\n    if (geocodes.length > 0) {\n      const count = geocodes.length;\n      showToast(`Selected ${count} ${count === 1 ? 'property' : 'properties'} for focused view`, 'success');\n    }\n  };\n  \n  const handleClearSelection = () => {\n    setSelectedPropertyGeocodes([]);\n    showToast('Selection cleared - showing all properties', 'info');\n  };\n\n  const handleDeleteProperty = (geocode: string) => {\n    // Remove property from master collection\n    setMasterPropertyCollection(prev => {\n      const newProperties = prev.properties.filter(\n        item => item.property.geocode !== geocode\n      );\n      return {\n        properties: newProperties,\n        totalCount: newProperties.length,\n        lastUpdated: new Date().toISOString()\n      };\n    });\n\n    // Update batch results if applicable\n    if (batchResults) {\n      setBatchResults(prev => {\n        if (!prev) return prev;\n        return {\n          ...prev,\n          results: prev.results.filter(r => r.geocode !== geocode),\n          totalRequested: prev.totalRequested - 1,\n          totalSuccessful: prev.results.find(r => r.geocode === geocode)?.success \n            ? prev.totalSuccessful - 1 \n            : prev.totalSuccessful,\n          totalFailed: prev.results.find(r => r.geocode === geocode)?.success === false\n            ? prev.totalFailed - 1\n            : prev.totalFailed\n        };\n      });\n    }\n\n    // Update batch property data\n    setBatchPropertyData(prev => prev.filter(p => p.geocode !== geocode));\n\n    // Clear selection if the deleted property was selected\n    if (selectedGeocode === geocode) {\n      setSelectedGeocode(null);\n    }\n\n    // Remove from selected property geocodes if applicable\n    if (selectedPropertyGeocodes.includes(geocode)) {\n      setSelectedPropertyGeocodes(prev => prev.filter(g => g !== geocode));\n    }\n\n    showToast('Property marker deleted from map', 'success');\n  };\n\n  const handleCopyAddress = (address: string) => {\n    showToast(\"Address copied to clipboard!\", \"success\");\n  };\n\n  const handleOpenInMaps = (address: string) => {\n    showToast(\"Opening location in maps...\", \"info\");\n  };\n\n  const handleTryAgain = () => {\n    setErrorState(null);\n    setPropertyData(null);\n    setBatchPropertyData([]);\n    setIsShowingBatch(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-on-surface font-sans\">\n      {/* Header */}\n      <header className=\"bg-surface border-b border-gray-700\" role=\"banner\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">MT</span>\n              </div>\n              <h1 className=\"text-xl font-semibold text-on-surface\">\n                Montana Property Lookup\n              </h1>\n            </div>\n          </div>\n        </div>\n      </header>\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" role=\"main\">\n        {/* Search Section */}\n        <div className=\"mb-8\">\n          <PropertySearchForm \n            onSearch={handleSearch}\n            onBatchResults={handleBatchResults}\n            onPropertySelect={handlePropertySelect}\n            isLoading={searchMutation.isPending}\n            mapMode={mapMode}\n            onMapModeChange={setMapMode}\n          />\n          \n          {/* Clear Map Button - only show when there are properties to clear */}\n          {masterPropertyCollection.properties.length > 0 && (\n            <div className=\"mt-4 flex justify-center\">\n              <Button\n                variant=\"outline\"\n                onClick={clearMasterCollection}\n                className=\"text-on-surface border-gray-600 hover:bg-surface-variant\"\n                data-testid=\"button-clear-map\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Clear Results ({masterPropertyCollection.properties.length} {masterPropertyCollection.properties.length === 1 ? 'property' : 'properties'})\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Results Section */}\n        {!errorState && (\n          <>\n            {/* Accumulated Map - Always show when properties exist */}\n            {mapPropertyData.length > 0 && (\n              <section className=\"mb-8 fade-in overflow-visible\" aria-labelledby=\"map-section-heading\">\n                <Card className=\"bg-surface border-gray-700 shadow-lg overflow-visible\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle \n                          id=\"map-section-heading\" \n                          className=\"text-xl font-semibold text-on-surface flex items-center space-x-2\"\n                        >\n                          <span className=\"w-5 h-5 bg-blue-500 rounded-full\"></span>\n                          <span>Map View</span>\n                        </CardTitle>\n                        <p className=\"text-on-surface-variant mt-1\">\n                          Showing {mapPropertyData.length} {mapPropertyData.length === 1 ? 'property' : 'properties'} on the map\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {/* Selection Mode Controls */}\n                        {mapPropertyData.length > 1 && (\n                          <div className=\"flex items-center space-x-2 mr-2\">\n                            <Button\n                              onClick={handleToggleSelectionMode}\n                              variant={isSelectionMode ? \"default\" : \"outline\"}\n                              size=\"sm\"\n                              className={isSelectionMode ? \n                                \"bg-green-600 hover:bg-green-700 text-white\" : \n                                \"border-gray-600 hover:bg-gray-700 text-gray-300 hover:text-white\"\n                              }\n                              title=\"Toggle property selection mode\"\n                              data-testid=\"button-toggle-selection\"\n                            >\n                              <Circle className=\"h-4 w-4 mr-1\" />\n                              {isSelectionMode ? 'Exit Selection' : 'Select Group'}\n                            </Button>\n                            \n                            {selectedPropertyGeocodes.length > 0 && (\n                              <>\n                                <Button\n                                  onClick={handleClearSelection}\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"border-red-600 hover:bg-red-700 text-red-300 hover:text-white\"\n                                  title=\"Clear current selection\"\n                                  data-testid=\"button-clear-selection\"\n                                >\n                                  <X className=\"h-4 w-4\" />\n                                </Button>\n                                <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n                                  {selectedPropertyGeocodes.length} Selected\n                                </Badge>\n                              </>\n                            )}\n                          </div>\n                        )}\n                        \n                        <Button\n                          onClick={() => setIsMapExpanded(true)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-gray-600 hover:bg-gray-700 text-gray-300 hover:text-white\"\n                          title=\"Expand map to full screen\"\n                          data-testid=\"button-expand-map\"\n                        >\n                          <Maximize2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Badge variant=\"secondary\" className=\"bg-blue-800 text-blue-100\">\n                          {selectedPropertyGeocodes.length > 0 ? filteredMapData.length : mapPropertyData.length} {selectedPropertyGeocodes.length > 0 ? 'Selected' : ''} {(selectedPropertyGeocodes.length > 0 ? filteredMapData.length : mapPropertyData.length) === 1 ? 'Property' : 'Properties'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"overflow-visible\">\n                    {!isMapExpanded && (\n                      <div className=\"w-full overflow-visible\" style={{ height: '320px' }}>\n                        <PropertyMap \n                          key=\"accumulated-map\"\n                          properties={isSelectionMode ? mapPropertyData : filteredMapData} \n                          selectedGeocode={selectedGeocode}\n                          isSelectionMode={isSelectionMode}\n                          onPropertySelection={handlePropertySelection}\n                          selectedPropertyGeocodes={selectedPropertyGeocodes}\n                          onDeleteProperty={handleDeleteProperty}\n                        />\n                      </div>\n                    )}\n                    {isMapExpanded && (\n                      <div className=\"w-full bg-surface-variant rounded-lg border border-gray-600 flex items-center justify-center\" style={{ height: '320px' }}>\n                        <p className=\"text-on-surface-variant\">Map expanded to full screen view</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </section>\n            )}\n\n            {/* Single Property Results */}\n            {propertyData && !isShowingBatch && (\n              <PropertyResults \n                property={propertyData}\n                onCopyAddress={handleCopyAddress}\n                onOpenInMaps={handleOpenInMaps}\n              />\n            )}\n            \n            {/* Batch Property Results */}\n            {batchPropertyData.length > 0 && isShowingBatch && (\n              <section className=\"fade-in\" aria-labelledby=\"batch-results-heading\">\n                <div className=\"grid lg:grid-cols-1 gap-8\">\n                  {/* Batch Summary Card */}\n                  <Card className=\"bg-surface border-gray-700 shadow-lg\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle \n                            id=\"batch-results-heading\" \n                            className=\"text-xl font-semibold text-on-surface flex items-center space-x-2\"\n                          >\n                            <span className=\"w-5 h-5 bg-green-500 rounded-full\"></span>\n                            <span>Batch Lookup Results</span>\n                          </CardTitle>\n                          <div className=\"text-on-surface-variant mt-1\">\n                            <p>\n                              {mapPropertyData.length} {mapPropertyData.length === 1 ? 'property' : 'properties'} found and displayed on the map\n                            </p>\n                            {selectedPropertyGeocodes.length > 0 && (\n                              <p className=\"text-green-400\">\n                                {selectedPropertyGeocodes.length} {selectedPropertyGeocodes.length === 1 ? 'property' : 'properties'} selected\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            onClick={() => setIsMapExpanded(true)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-gray-600 hover:bg-gray-700 text-gray-300 hover:text-white\"\n                            title=\"Expand map to full screen\"\n                            data-testid=\"button-expand-map\"\n                          >\n                            <Maximize2 className=\"h-4 w-4\" />\n                          </Button>\n                          <Badge variant=\"secondary\" className=\"bg-blue-800 text-blue-100\">\n                            {mapPropertyData.length} Properties\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {/* Results Summary and Export Actions */}\n                      {filteredBatchResults && filteredBatchResults.success && filteredBatchResults.results.length > 0 && (\n                        <div className=\"mt-6 space-y-4\">\n                          <div className=\"space-y-2\">\n                            <h4 className=\"text-sm font-medium text-on-surface\">\n                              {selectedPropertyGeocodes.length > 0 ? 'Selected Properties:' : 'Results Summary:'}\n                            </h4>\n                            <div className=\"max-h-40 overflow-y-auto space-y-1\">\n                              {filteredBatchResults.results.map((result, index) => {\n                                const isSelected = selectedGeocode === result.geocode;\n                                return (\n                                <div \n                                  key={index} \n                                  onClick={() => result.success && handlePropertySelect(result.geocode)}\n                                  onKeyDown={(e) => {\n                                    if ((e.key === 'Enter' || e.key === ' ') && result.success) {\n                                      e.preventDefault();\n                                      handlePropertySelect(result.geocode);\n                                    }\n                                  }}\n                                  tabIndex={result.success ? 0 : -1}\n                                  role={result.success ? \"button\" : undefined}\n                                  aria-label={result.success && result.data?.address ? `Select property ${result.data.address}` : undefined}\n                                  className={`flex items-center justify-between p-2 rounded text-xs transition-all duration-200 ${\n                                    isSelected \n                                      ? 'bg-orange-900/40 border-2 border-orange-500' \n                                      : 'bg-surface-variant border-2 border-transparent'\n                                  } ${result.success ? 'cursor-pointer hover:bg-gray-700/50' : ''}`}\n                                >\n                                  <div className=\"flex items-center space-x-2 flex-1 pointer-events-none\">\n                                    <span className=\"font-mono\">{result.geocode}</span>\n                                    {result.success && result.data?.address && (\n                                      <span\n                                        className=\"text-blue-400 truncate flex-1 text-left\"\n                                        title={result.data.address}\n                                        data-testid={`address-link-${result.geocode}`}\n                                      >\n                                        {result.data.address}\n                                      </span>\n                                    )}\n                                    {result.processedAt && (\n                                      <span className=\"text-gray-500 text-xs\">\n                                        {new Date(result.processedAt).toLocaleTimeString()}\n                                      </span>\n                                    )}\n                                  </div>\n                                  <div className=\"flex items-center space-x-2 pointer-events-auto\">\n                                    {result.success ? (\n                                      <div className=\"flex items-center space-x-1 pointer-events-none\">\n                                        <CheckCircle className=\"h-3 w-3 text-green-400\" />\n                                        <span className=\"text-green-400\">Found</span>\n                                      </div>\n                                    ) : (\n                                      <div className=\"flex items-center space-x-2\">\n                                        <div className=\"flex items-center space-x-1 pointer-events-none\">\n                                          <XCircle className=\"h-3 w-3 text-red-400\" />\n                                          <span className=\"text-red-400\" title={result.error}>\n                                            {result.error && result.error.length > 20 \n                                              ? result.error.substring(0, 20) + '...' \n                                              : result.error || 'Error'}\n                                          </span>\n                                        </div>\n                                        <Button\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            handleRetryIndividual(result.geocode);\n                                          }}\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          disabled={retryingGeocodes.has(result.geocode)}\n                                          className=\"h-6 w-6 p-0 hover:bg-orange-800/20\"\n                                          data-testid={`button-retry-${result.geocode}`}\n                                          title=\"Retry this geocode\"\n                                        >\n                                          {retryingGeocodes.has(result.geocode) ? (\n                                            <Loader2 className=\"h-3 w-3 animate-spin text-orange-400\" />\n                                          ) : (\n                                            <RefreshCw className=\"h-3 w-3 text-orange-400\" />\n                                          )}\n                                        </Button>\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                                );\n                              })}\n                            </div>\n                          </div>\n\n                          {/* Export and Retry Actions */}\n                          <div className=\"flex flex-wrap gap-2 p-3 bg-surface-variant rounded-lg\">\n                            <Button\n                              onClick={() => handleExportCSV(true)}\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              className=\"bg-blue-800 hover:bg-blue-700 text-blue-100\"\n                              data-testid=\"button-export-all\"\n                            >\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Export All Results\n                            </Button>\n                            \n                            <Button\n                              onClick={() => handleExportCSV(false)}\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              className=\"bg-green-800 hover:bg-green-700 text-green-100\"\n                              data-testid=\"button-export-successful\"\n                            >\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Export Successful Only\n                            </Button>\n\n                            {filteredBatchResults.totalFailed > 0 && (\n                              <Button\n                                onClick={handleRetryAllFailed}\n                                variant=\"secondary\"\n                                size=\"sm\"\n                                disabled={retryMutation.isPending}\n                                className=\"bg-orange-800 hover:bg-orange-700 text-orange-100 disabled:bg-gray-600\"\n                                data-testid=\"button-retry-all-failed\"\n                              >\n                                {retryMutation.isPending ? (\n                                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                ) : (\n                                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                                )}\n                                Retry All Failed ({filteredBatchResults.totalFailed})\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </section>\n            )}\n          </>\n        )}\n\n        {/* Full-Screen Map Modal */}\n        {isMapExpanded && mapPropertyData.length > 0 && (\n          <div className=\"fixed inset-0 z-50 bg-black bg-opacity-90 flex items-center justify-center p-4\">\n            <div className=\"w-full h-full max-w-7xl bg-surface rounded-lg border border-gray-700 flex flex-col\">\n              {/* Modal Header */}\n              <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"w-4 h-4 bg-green-500 rounded-full\"></span>\n                  <h2 className=\"text-lg font-semibold text-on-surface\">\n                    Map View - {selectedPropertyGeocodes.length > 0 ? filteredMapData.length : mapPropertyData.length} {selectedPropertyGeocodes.length > 0 ? 'Selected' : ''} Properties\n                  </h2>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {/* Selection Mode Controls for Expanded View */}\n                  {mapPropertyData.length > 1 && (\n                    <div className=\"flex items-center space-x-2 mr-2\">\n                      <Button\n                        onClick={handleToggleSelectionMode}\n                        variant={isSelectionMode ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className={isSelectionMode ? \n                          \"bg-green-600 hover:bg-green-700 text-white\" : \n                          \"border-gray-600 hover:bg-gray-700 text-gray-300 hover:text-white\"\n                        }\n                        title=\"Toggle property selection mode\"\n                        data-testid=\"button-toggle-selection-expanded\"\n                      >\n                        <Circle className=\"h-4 w-4 mr-1\" />\n                        {isSelectionMode ? 'Exit Selection' : 'Select Group'}\n                      </Button>\n                      \n                      {selectedPropertyGeocodes.length > 0 && (\n                        <>\n                          <Button\n                            onClick={handleClearSelection}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-red-600 hover:bg-red-700 text-red-300 hover:text-white\"\n                            title=\"Clear current selection\"\n                            data-testid=\"button-clear-selection-expanded\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                          <Badge variant=\"secondary\" className=\"bg-green-800 text-green-100\">\n                            {selectedPropertyGeocodes.length} Selected\n                          </Badge>\n                        </>\n                      )}\n                    </div>\n                  )}\n                  \n                  <Button\n                    onClick={() => setIsMapExpanded(false)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"hover:bg-gray-700 text-gray-400 hover:text-white\"\n                    title=\"Close full screen view\"\n                    data-testid=\"button-close-expanded-map\"\n                  >\n                    <X className=\"h-5 w-5\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Expanded Map Container */}\n              <div className=\"flex-1 p-4 overflow-hidden flex flex-col\">\n                <div className=\"w-full flex-1 rounded-lg overflow-hidden\">\n                  <PropertyMap \n                    key={`expanded-map-${isMapExpanded}-${mapPropertyData.length}`}\n                    properties={isSelectionMode ? mapPropertyData : filteredMapData} \n                    selectedGeocode={selectedGeocode}\n                    isSelectionMode={isSelectionMode}\n                    onPropertySelection={handlePropertySelection}\n                    selectedPropertyGeocodes={selectedPropertyGeocodes}\n                    onDeleteProperty={handleDeleteProperty}\n                  />\n                </div>\n              </div>\n              \n              {/* Results Summary in Modal */}\n              {filteredBatchResults && filteredBatchResults.success && filteredBatchResults.results.length > 0 && (\n                <div className=\"border-t border-gray-700 p-4 max-h-48 overflow-y-auto\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium text-on-surface mb-2\">\n                      {selectedPropertyGeocodes.length > 0 ? 'Selected Properties - Click to highlight:' : 'Click addresses to highlight on map:'}\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {filteredBatchResults.results\n                        .filter(result => result.success && result.data?.address)\n                        .map((result, index) => (\n                          <button\n                            key={result.geocode}\n                            onClick={() => handlePropertySelect(result.geocode)}\n                            className={`p-2 rounded text-left transition-colors duration-200 text-sm ${\n                              selectedGeocode === result.geocode\n                                ? 'bg-orange-800/30 border border-orange-500 text-orange-300'\n                                : 'bg-surface-variant hover:bg-surface-variant/80 text-blue-400 hover:text-blue-300'\n                            }`}\n                            title=\"Click to highlight on map\"\n                            data-testid={`modal-address-link-${result.geocode}`}\n                          >\n                            <div className=\"font-mono text-xs text-gray-400\">{result.geocode}</div>\n                            <div className=\"truncate\">{result.data?.address}</div>\n                          </button>\n                        ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Error State */}\n        {errorState && (\n          <section className=\"fade-in mb-8\" role=\"alert\" aria-labelledby=\"error-heading\">\n            <Card className=\"bg-red-900/20 border-red-700\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-red-500 rounded-full flex-shrink-0 flex items-center justify-center mt-0.5\">\n                    <AlertCircle className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 id=\"error-heading\" className=\"text-lg font-semibold text-red-300 mb-2\">\n                      Property Not Found\n                    </h3>\n                    <p className=\"text-red-200 mb-4\" data-testid=\"text-error-message\">\n                      {errorState}\n                    </p>\n                    <div className=\"flex flex-wrap gap-3\">\n                      <Button\n                        onClick={handleTryAgain}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center space-x-2\"\n                        data-testid=\"button-try-again\"\n                      >\n                        <RotateCcw className=\"h-4 w-4\" />\n                        <span>Try Again</span>\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        className=\"bg-red-900/40 hover:bg-red-800/40 text-red-300 px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center space-x-2\"\n                        data-testid=\"button-get-help\"\n                      >\n                        <HelpCircle className=\"h-4 w-4\" />\n                        <span>Get Help</span>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        )}\n\n        {/* Help Section */}\n        <section className=\"mt-12 rounded-xl p-6 shadow-lg border border-gray-700 bg-[#171717]\" aria-labelledby=\"help-heading\">\n          <h3 id=\"help-heading\" className=\"text-lg font-semibold text-on-surface mb-4\">\n            How to Use This Tool\n          </h3>\n          <div className=\"space-y-4 text-on-surface-variant\">\n            <div className=\"flex items-start space-x-3\">\n              <span className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0 mt-0.5\">1</span>\n              <p><strong>Single Lookup:</strong> Enter a Montana property geocode in the search field, or <strong>Batch Lookup:</strong> copy/paste multiple geocodes or upload a CSV file.</p>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <span className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0 mt-0.5\">2</span>\n              <p>Click \"Search Property\" or \"Process Geocodes\" to retrieve property information from the Montana cadastral database.</p>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <span className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0 mt-0.5\">3</span>\n              <p>View property details and explore the interactive map. Multiple properties will show with different colored markers and boundaries.</p>\n            </div>\n          </div>\n        </section>\n      </main>\n      {/* Footer */}\n      <footer className=\"bg-surface border-t border-gray-700 mt-12\" role=\"contentinfo\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0\">\n            <p className=\"text-sm text-on-surface-variant\">\n              Data provided by the Montana State Library Cadastral Mapping Service\n            </p>\n            <p className=\"text-sm text-on-surface-variant\">\n              Copyright © 2025 | Bobbi Johnson\n            </p>\n          </div>\n        </div>\n      </footer>\n      {/* Toast Notifications */}\n      {toast.show && (\n        <div className=\"fixed top-4 right-4 z-50\" aria-live=\"polite\">\n          <ToastNotification\n            message={toast.message}\n            type={toast.type}\n            onClose={hideToast}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":42408},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/lib/csv-utils.ts":{"content":"import { BatchApiResponse, BatchPropertyResult } from \"@shared/schema\";\n\nexport interface CsvExportOptions {\n  includeFailedRows?: boolean;\n  includeTimestamps?: boolean;\n  includeMetadata?: boolean;\n}\n\n/**\n * Convert batch results to CSV format\n */\nexport function batchResultsToCSV(\n  batchResponse: BatchApiResponse, \n  options: CsvExportOptions = {}\n): string {\n  const { includeFailedRows = true, includeTimestamps = true, includeMetadata = true } = options;\n  \n  const rows: string[] = [];\n  \n  // Build header row\n  const headers = [\n    'Geocode',\n    'Status',\n    'Address',\n    'County',\n    'Coordinates',\n    'Legal Description',\n    'Latitude', \n    'Longitude',\n  ];\n  \n  if (includeTimestamps) {\n    headers.push('Processed At');\n  }\n  \n  if (includeFailedRows) {\n    headers.push('Error Message');\n  }\n  \n  rows.push(headers.join(','));\n  \n  // Add data rows\n  const resultsToInclude = includeFailedRows \n    ? batchResponse.results \n    : batchResponse.results.filter(r => r.success);\n    \n  for (const result of resultsToInclude) {\n    const row = [\n      escapeCsvValue(result.geocode),\n      result.success ? 'Success' : 'Failed',\n      escapeCsvValue(result.data?.address || ''),\n      escapeCsvValue(result.data?.county || ''),\n      escapeCsvValue(result.data?.coordinates || ''),\n      escapeCsvValue(result.data?.legalDescription || ''),\n      result.data?.lat ? result.data.lat.toString() : '',\n      result.data?.lng ? result.data.lng.toString() : '',\n    ];\n    \n    if (includeTimestamps) {\n      row.push(result.processedAt || '');\n    }\n    \n    if (includeFailedRows) {\n      row.push(escapeCsvValue(result.error || ''));\n    }\n    \n    rows.push(row.join(','));\n  }\n  \n  // Add metadata at the bottom if requested\n  if (includeMetadata && batchResponse.startedAt) {\n    rows.push(''); // Empty row separator\n    rows.push('# Batch Processing Metadata');\n    rows.push(`# Batch ID,${batchResponse.batchId || 'N/A'}`);\n    rows.push(`# Started At,${batchResponse.startedAt}`);\n    rows.push(`# Completed At,${batchResponse.completedAt || 'N/A'}`);\n    rows.push(`# Total Requested,${batchResponse.totalRequested}`);\n    rows.push(`# Total Successful,${batchResponse.totalSuccessful}`);\n    rows.push(`# Total Failed,${batchResponse.totalFailed}`);\n    rows.push(`# Success Rate,${Math.round((batchResponse.totalSuccessful / batchResponse.totalRequested) * 100)}%`);\n  }\n  \n  return rows.join('\\n');\n}\n\n/**\n * Escape CSV values that contain commas, quotes, or newlines\n */\nfunction escapeCsvValue(value: string): string {\n  if (!value) return '';\n  \n  // If value contains comma, quote, or newline, wrap in quotes and escape internal quotes\n  if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\n    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n  \n  return value;\n}\n\n/**\n * Download CSV file to user's device\n */\nexport function downloadCSV(csvContent: string, filename: string): void {\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  \n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n}\n\n/**\n * Generate a filename for CSV export with timestamp\n */\nexport function generateCsvFilename(prefix: string = 'montana-property-lookup'): string {\n  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\n  return `${prefix}-${timestamp}.csv`;\n}\n\n/**\n * Extract failed geocodes from batch results for retry\n */\nexport function getFailedGeocodes(batchResponse: BatchApiResponse): string[] {\n  return batchResponse.results\n    .filter(result => !result.success)\n    .map(result => result.geocode);\n}","size_bytes":3911},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const geocodeSearchSchema = z.object({\n  geocode: z.string()\n    .min(5, \"Geocode must be at least 5 characters\")\n    .regex(/^[0-9\\-]+$/, \"Geocode must contain only numbers and hyphens\")\n    .max(25, \"Geocode must be less than 25 characters\")\n});\n\nexport const batchGeocodeSearchSchema = z.object({\n  geocodes: z.array(z.string()\n    .min(5, \"Geocode must be at least 5 characters\")\n    .regex(/^[0-9\\-]+$/, \"Geocode must contain only numbers and hyphens\")\n    .max(25, \"Geocode must be less than 25 characters\"))\n    .min(1, \"At least one geocode is required\")\n    .max(50, \"Maximum 50 geocodes allowed per batch\")\n});\n\n// Polygon geometry schema for parcel boundaries\nexport const polygonGeometrySchema = z.object({\n  type: z.literal(\"Polygon\"),\n  coordinates: z.array(z.array(z.tuple([z.number(), z.number()]))) // [[[lng, lat], [lng, lat], ...]]\n});\n\nexport const propertyInfoSchema = z.object({\n  geocode: z.string(),\n  address: z.string(),\n  county: z.string().optional(),\n  coordinates: z.string().optional(),\n  legalDescription: z.string().optional(),\n  lat: z.number().optional(),\n  lng: z.number().optional(),\n  // Add polygon geometry for parcel boundaries\n  parcelGeometry: polygonGeometrySchema.optional()\n});\n\nexport type GeocodeSearch = z.infer<typeof geocodeSearchSchema>;\nexport type BatchGeocodeSearch = z.infer<typeof batchGeocodeSearchSchema>;\nexport type PropertyInfo = z.infer<typeof propertyInfoSchema>;\n\n// Individual result in a batch - can be success or error\nexport const batchPropertyResultSchema = z.object({\n  geocode: z.string(),\n  success: z.boolean(),\n  data: propertyInfoSchema.optional(),\n  error: z.string().optional(),\n  processedAt: z.string().optional() // ISO timestamp\n});\n\nexport const apiResponseSchema = z.object({\n  success: z.boolean(),\n  data: propertyInfoSchema.optional(),\n  error: z.string().optional()\n});\n\n// Batch API response schema\nexport const batchApiResponseSchema = z.object({\n  success: z.boolean(),\n  results: z.array(batchPropertyResultSchema),\n  totalRequested: z.number(),\n  totalSuccessful: z.number(),\n  totalFailed: z.number(),\n  error: z.string().optional(), // For overall batch errors\n  batchId: z.string().optional(), // Unique identifier for this batch\n  startedAt: z.string().optional(), // ISO timestamp when batch started\n  completedAt: z.string().optional() // ISO timestamp when batch completed\n});\n\nexport type BatchPropertyResult = z.infer<typeof batchPropertyResultSchema>;\nexport type ApiResponse = z.infer<typeof apiResponseSchema>;\nexport type BatchApiResponse = z.infer<typeof batchApiResponseSchema>;\n","size_bytes":2620},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"replit.md":{"content":"# Montana Property Geocode Lookup\n\n## Overview\n\nThis is a full-stack web application that allows users to look up Montana property information using geocodes. Users enter a Montana property geocode, and the application extracts the physical address from the Montana State Library cadastral database, displays the address information, and shows the location on an interactive map with precise coordinates. The application is built with a React frontend, Express backend, and uses web scraping to retrieve property data from the Montana cadastral website.\n\n## Recent Changes (September 7, 2025)\n- **Multi-Property Map Enhancement**: Extended PropertyMap component to display multiple properties simultaneously with different colored markers and polygons\n- **Dynamic Color Coding**: Implemented 12-color palette system that automatically assigns unique colors to each property for easy identification\n- **Enhanced Interactive Legend**: Updated map legend to show individual property information with geocodes, addresses, and color-coded indicators\n- **Auto-Fit Bounds Optimization**: Map automatically calculates and fits bounds to display all properties with appropriate padding\n- **Performance Optimizations**: Added React.memo, useMemo, icon caching, polygon simplification, and 50-property limit for optimal rendering performance\n- **Enhanced Input Options**: Added textarea for copy/paste geocode lists, drag & drop CSV file upload, input validation and geocode preview\n- **Batch Processing Interface**: Implemented tab-based interface allowing users to mix single geocode and batch processing modes\n- **Comprehensive Input Parsing**: Smart parsing handles both plain text lists and CSV formats with header detection and duplicate removal\n- **Real-time Preview**: Shows detected geocodes with count before processing, including validation warnings for limits\n- **Integrated Results Display**: Batch results automatically display on the enhanced multi-property map with color-coded properties\n- **Export and Retry Features**: Added CSV export functionality, individual retry buttons for failed geocodes, and \"retry all failed\" batch option\n- **Comprehensive CSV Export**: Export includes timestamps, processing metadata, batch statistics, and configurable options for successful vs failed results\n- **Individual and Batch Retry**: Users can retry individual failed geocodes or retry all failed geocodes at once with real-time status updates\n- **Enhanced Metadata Tracking**: Backend now includes batch IDs, processing timestamps, and detailed timing information for audit trails\n- **Unified Blue Color Scheme**: Simplified map display to use single blue color (#2196F3) for all properties while maintaining multi-property functionality\n- **Real-time Progress Tracking**: Implemented WebSocket-based progress updates with live batch processing status, ETA calculations, and processing rates\n- **Enhanced UX Polish**: Added smooth animations, real-time progress indicators, rate limiting for large batches, and polished loading states\n- **Advanced Queue Management**: Implemented sequential processing with rate limiting (100ms delays for large batches) and intelligent time estimation\n- **Interactive Progress Display**: Fixed-position progress tracker with real-time statistics, connection status, and dismissible interface\n- **Backward Compatibility**: Maintained single-property support while enabling multi-property display capabilities\n\n## Previous Changes (September 4, 2025)\n- **Deployment Compatibility Fixes**: Resolved deployment initialization failures by removing unused session dependencies\n- **Enhanced Server Error Handling**: Added comprehensive startup error handling with detailed logging and graceful error recovery\n- **Process Error Handlers**: Implemented uncaught exception and unhandled rejection handlers to prevent silent crashes\n- **Cleanup Legacy Dependencies**: Removed all unused session management packages (express-session, passport, connect-pg-simple) \n- **Robust Server Startup**: Added environment validation, port verification, and enhanced server error handling for production deployment\n\n## Previous Changes (September 1, 2025)\n- **Parcel Polygon Mapping**: Enhanced map display to show actual property parcel boundaries from Montana API instead of single points\n- **Montana API Geometry Integration**: Updated ArcGIS REST API calls to request and process polygon geometry data (outSR=4326)\n- **React Leaflet Polygon Rendering**: Implemented polygon visualization using React Leaflet with semi-transparent fill and colored borders\n- **Coordinate System Fixes**: Resolved coordinate conversion issues to properly display Montana parcel polygons in lat/lng format\n- **Enhanced Map Legend**: Updated map legend to distinguish between parcel boundaries and property center points\n- **Auto-Fit Map Bounds**: Map automatically adjusts to show the entire parcel polygon instead of fixed zoom on center point\n\n## Previous Changes (August 31, 2025)\n- **Deployment Issue Completely Resolved**: Eliminated all Python/Playwright dependencies for full deployment compatibility\n- **Pure Node.js Implementation**: Replaced Python scripts with native TypeScript/Node.js using official Montana ArcGIS REST API\n- **Official Montana API Integration**: Direct integration with Montana State GIS Service ArcGIS REST API at `gisservicemt.gov`\n- **Multi-Strategy Lookup System**: ArcGIS API → HTTP fallback scraping → Known properties database\n- **Performance Optimization**: Reduced response times from 20+ seconds to under 600ms consistently\n- **Deployment Ready**: No external dependencies, works in both preview and deployment environments\n- **Testing Verified**: Successfully tested with geocode \"03-1032-34-1-08-10-0000\" → \"2324 REHBERG LN BILLINGS, MT 59102\" with precise coordinates (45.79349712262358, -108.59169642387414)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript and follows a component-based architecture. Key design decisions include:\n\n- **React with Vite**: Chosen for fast development and build times with hot module replacement\n- **Wouter for Routing**: Lightweight routing solution instead of React Router, reducing bundle size\n- **TanStack Query**: Manages server state and API calls with caching, background updates, and error handling\n- **Tailwind CSS + shadcn/ui**: Provides consistent styling with a comprehensive component library\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Dark Mode Theme**: Application defaults to dark mode with CSS custom properties for theming\n\n### Backend Architecture\nThe backend uses Express.js with TypeScript and implements a RESTful API design:\n\n- **Express Server**: Lightweight web framework with middleware for JSON parsing and logging\n- **Property Lookup Service**: Uses official Montana ArcGIS REST API with Node.js/TypeScript implementation\n- **Validation Layer**: Zod schemas validate input data and API responses\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Development Tools**: Custom Vite integration for development with HMR support\n\n### Data Storage Solutions\nThe application currently uses minimal data storage:\n\n- **No Persistent Database**: Property data is fetched on-demand from the Montana cadastral website\n- **Memory Storage**: Basic in-memory storage interface is provided for future user management if needed\n- **Session Management**: Infrastructure exists for PostgreSQL sessions using connect-pg-simple\n\n### Property Data Integration\nProperty data is retrieved through official Montana state APIs and fallback mechanisms:\n\n- **Montana ArcGIS REST API**: Primary source using official `gisservicemt.gov` ArcGIS services\n- **HTTP Fallback Scraping**: Secondary approach using simple HTTP requests to cadastral website\n- **Known Properties Database**: Tertiary fallback with verified property data for common geocodes\n- **Pure Node.js Implementation**: No external dependencies, fully deployment-compatible\n- **Real Data Extraction**: Successfully extracts authentic property information from Montana State sources\n\n### Interactive Mapping\nThe application includes an interactive map component with precise geocoding:\n\n- **React Leaflet**: Provides map functionality with OpenStreetMap tiles\n- **Precise Coordinate Database**: Maintains known exact coordinates for Montana properties\n- **Multi-Service Geocoding**: Uses OpenStreetMap Nominatim API with building-level precision\n- **Decimal Degree Format**: Coordinates displayed in decimal degrees (e.g., 45.79349712262358, -108.59169642387414)\n- **Custom Controls**: Zoom controls and map interactions optimized for accessibility\n- **Responsive Design**: Map adapts to different screen sizes and device types\n\n### API Design\nThe REST API follows a simple, predictable structure:\n\n- **POST /api/property/lookup**: Accepts geocode and returns property information\n- **Validation**: Input validation using Zod schemas\n- **Response Format**: Consistent JSON responses with success/error indicators\n- **Error Handling**: Proper HTTP status codes and descriptive error messages\n\n### Accessibility Features\nThe application implements WCAG AA accessibility standards:\n\n- **Semantic HTML**: Proper use of semantic elements and ARIA attributes\n- **Keyboard Navigation**: All interactive elements are keyboard accessible\n- **Screen Reader Support**: Proper labeling and descriptions for assistive technologies\n- **Focus Management**: Visible focus indicators and logical tab order\n- **Color Contrast**: Dark theme maintains sufficient contrast ratios\n\n## External Dependencies\n\n### Third-Party Services\n- **Montana State GIS Service**: Official ArcGIS REST API at `https://gisservicemt.gov/arcgis/rest/services/`\n- **Montana State Library Cadastral Database**: Fallback HTTP requests to `https://svc.mt.gov/msl/cadastral/`\n- **OpenStreetMap**: Map tiles for the interactive mapping component and geocoding services\n- **CDN Resources**: Leaflet CSS and marker icons from CDN\n\n### Key NPM Packages\n- **@tanstack/react-query**: Server state management and caching\n- **react-leaflet**: Interactive mapping components\n- **Native fetch API**: HTTP requests for property data retrieval\n- **@radix-ui/**: Accessible UI component primitives\n- **react-hook-form**: Form state management and validation\n- **zod**: Runtime type validation and schema definition\n- **tailwindcss**: Utility-first CSS framework\n- **wouter**: Lightweight routing for React\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundling for production\n- **Drizzle Kit**: Database toolkit (configured for future PostgreSQL integration)\n\n### Runtime Dependencies\n- **Node.js**: Server runtime environment (only dependency required for deployment)","size_bytes":10979},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(210, 79%, 46%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 26%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(210, 79%, 46%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(210, 79%, 46%);\n  --chart-1: hsl(210, 79%, 46%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(210, 79%, 46%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(210, 79%, 46%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(210, 79%, 46%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  \n  /* Dark mode specific colors */\n  --surface: hsl(0, 0%, 9%);\n  --surface-variant: hsl(0, 0%, 9%);\n  --on-surface: hsl(0, 0%, 100%);\n  --on-surface-variant: hsl(0, 0%, 70%);\n  --error: hsl(356, 90%, 54%);\n  --success: hsl(122, 39%, 49%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(0, 0%, 9%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 79%, 46%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(210, 70%, 7.8%);\n  --accent-foreground: hsl(210, 79%, 46%);\n  --destructive: hsl(356, 90%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(210, 79%, 46%);\n  --chart-1: hsl(210, 79%, 46%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 9%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 79%, 46%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 70%, 7.8%);\n  --sidebar-accent-foreground: hsl(210, 79%, 46%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(210, 79%, 46%);\n  \n  /* Dark mode specific colors */\n  --surface: hsl(0, 0%, 9%);\n  --surface-variant: hsl(0, 0%, 9%);\n  --on-surface: hsl(0, 0%, 100%);\n  --on-surface-variant: hsl(0, 0%, 70%);\n  --error: hsl(356, 90%, 54%);\n  --success: hsl(122, 39%, 49%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n  \n  html {\n    @apply dark;\n  }\n}\n\n@layer utilities {\n  .surface {\n    background-color: var(--surface);\n  }\n  \n  .surface-variant {\n    background-color: var(--surface-variant);\n  }\n  \n  .text-on-surface {\n    color: var(--on-surface);\n  }\n  \n  .text-on-surface-variant {\n    color: var(--on-surface-variant);\n  }\n  \n  .text-error {\n    color: var(--error);\n  }\n  \n  .bg-surface {\n    background-color: var(--surface);\n  }\n  \n  .bg-surface-variant {\n    background-color: var(--surface-variant);\n  }\n  \n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.3s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n      transform: translateY(10px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n}\n\n/* Leaflet dark theme customizations */\n.leaflet-dark-theme {\n  background-color: var(--surface);\n}\n\n.leaflet-dark-theme .leaflet-control-attribution {\n  background-color: var(--surface);\n  color: var(--on-surface-variant);\n  border: 1px solid var(--border);\n}\n\n.leaflet-dark-theme .leaflet-popup-content-wrapper {\n  background-color: white;\n  color: #333;\n}\n\n.leaflet-dark-theme .leaflet-popup-tip {\n  background-color: white;\n}\n\n/* Custom marker styles */\n.custom-marker {\n  background: none !important;\n  border: none !important;\n}\n\n/* Loading spinner animation */\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Progress animation styles */\n.animate-in {\n  animation: slideInRight 0.3s ease-out forwards;\n}\n\n.animate-out {\n  animation: slideOutRight 0.3s ease-in forwards;\n}\n\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideOutRight {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n}\n\n/* Property marker pulse animation for selected property */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 3px 6px rgba(0,0,0,0.4);\n  }\n  50% {\n    transform: scale(1.1);\n    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.6);\n  }\n  100% {\n    transform: scale(1);\n    box-shadow: 0 3px 6px rgba(0,0,0,0.4);\n  }\n}\n","size_bytes":5962},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/services/geocode-service.ts":{"content":"import { PropertyInfo, BatchPropertyResult } from '@shared/schema';\nimport { MontanaApiService } from './montana-api-service';\n\n\nexport class GeocodeService {\n  private montanaApiService: MontanaApiService;\n\n  constructor() {\n    this.montanaApiService = new MontanaApiService();\n  }\n\n  async getPropertyInfo(geocode: string): Promise<PropertyInfo> {\n    // Use Node.js-based API calls instead of Python scripts for deployment compatibility\n    const result = await this.montanaApiService.getPropertyAddress(geocode);\n    \n    if (!result.success) {\n      throw new Error(result.error || 'Failed to fetch property information');\n    }\n\n    if (!result.address) {\n      throw new Error('No address found in response');\n    }\n\n    // Calculate center point from parcel geometry for fallback coordinates\n    let coordinates: { lat: number; lng: number } | null = null;\n    \n    if (result.parcelGeometry) {\n      // Calculate center of polygon for display coordinates\n      coordinates = this.calculatePolygonCenter(result.parcelGeometry);\n      console.log(`Using parcel center coordinates for: ${result.address}`);\n    } else {\n      // Fallback to geocoding service if no parcel geometry\n      coordinates = await this.extractCoordinatesFromAddress(result.address);\n      console.log(`Geocoding address (no parcel geometry): ${result.address}`);\n    }\n    \n    const propertyInfo: PropertyInfo = {\n      geocode: result.geocode || geocode,\n      address: result.address,\n      county: this.extractCountyFromAddress(result.address),\n      coordinates: coordinates ? `${coordinates.lat}°N, ${Math.abs(coordinates.lng)}°W` : undefined,\n      legalDescription: undefined,\n      lat: coordinates?.lat,\n      lng: coordinates?.lng,\n      parcelGeometry: result.parcelGeometry\n    };\n\n    return propertyInfo;\n  }\n\n  async getPropertiesInfoBatch(geocodes: string[]): Promise<BatchPropertyResult[]> {\n    console.log(`Processing batch of ${geocodes.length} geocodes...`);\n    \n    // Process all geocodes concurrently using Promise.allSettled to handle partial failures\n    const settledPromises = await Promise.allSettled(\n      geocodes.map(async (geocode): Promise<BatchPropertyResult> => {\n        const processedAt = new Date().toISOString();\n        try {\n          const propertyInfo = await this.getPropertyInfo(geocode);\n          return {\n            geocode,\n            success: true,\n            data: propertyInfo,\n            processedAt\n          };\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n          console.warn(`Failed to process geocode ${geocode}:`, errorMessage);\n          return {\n            geocode,\n            success: false,\n            error: errorMessage,\n            processedAt\n          };\n        }\n      })\n    );\n\n    // Extract results from settled promises - all results will be BatchPropertyResult\n    const results: BatchPropertyResult[] = settledPromises.map(settledResult => {\n      if (settledResult.status === 'fulfilled') {\n        return settledResult.value;\n      } else {\n        // This should rarely happen since we handle errors in the inner try-catch\n        return {\n          geocode: 'unknown',\n          success: false,\n          error: `Promise rejected: ${settledResult.reason}`,\n          processedAt: new Date().toISOString()\n        };\n      }\n    });\n\n    console.log(`Batch processing complete: ${results.filter(r => r.success).length}/${results.length} successful`);\n    return results;\n  }\n\n  async getPropertiesInfoBatchWithProgress(\n    geocodes: string[], \n    batchId: string,\n    onProgress: (progress: any) => void\n  ): Promise<BatchPropertyResult[]> {\n    console.log(`Processing batch ${batchId} with ${geocodes.length} geocodes...`);\n    \n    const results: BatchPropertyResult[] = [];\n    const startTime = Date.now();\n    let totalProcessingTime = 0;\n    \n    // Process geocodes sequentially with rate limiting for large batches\n    const isLargeBatch = geocodes.length > 5;\n    const delayBetweenRequests = isLargeBatch ? 100 : 0; // 100ms delay for large batches\n    \n    for (let i = 0; i < geocodes.length; i++) {\n      const geocode = geocodes[i];\n      const itemStartTime = Date.now();\n      \n      try {\n        const propertyInfo = await this.getPropertyInfo(geocode);\n        const processedAt = new Date().toISOString();\n        \n        results.push({\n          geocode,\n          success: true,\n          data: propertyInfo,\n          processedAt\n        });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        console.warn(`Failed to process geocode ${geocode}:`, errorMessage);\n        \n        results.push({\n          geocode,\n          success: false,\n          error: errorMessage,\n          processedAt: new Date().toISOString()\n        });\n      }\n      \n      // Calculate timing metrics\n      const itemProcessingTime = Date.now() - itemStartTime;\n      totalProcessingTime += itemProcessingTime;\n      const averageProcessingTime = totalProcessingTime / (i + 1);\n      const remainingItems = geocodes.length - (i + 1);\n      const estimatedTimeRemaining = Math.round((remainingItems * averageProcessingTime) / 1000); // in seconds\n      \n      const successCount = results.filter(r => r.success).length;\n      const failedCount = results.filter(r => !r.success).length;\n      \n      // Send progress update\n      onProgress({\n        status: 'processing',\n        totalGeocodes: geocodes.length,\n        processedCount: i + 1,\n        successCount,\n        failedCount,\n        currentGeocode: geocode,\n        estimatedTimeRemaining,\n        processingRate: Math.round(60000 / averageProcessingTime), // items per minute\n        elapsedTime: Math.round((Date.now() - startTime) / 1000) // seconds\n      });\n      \n      // Rate limiting for large batches\n      if (delayBetweenRequests > 0 && i < geocodes.length - 1) {\n        await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\n      }\n    }\n    \n    console.log(`Batch ${batchId} processing complete: ${results.filter(r => r.success).length}/${results.length} successful`);\n    return results;\n  }\n\n  private extractCountyFromAddress(address: string): string | undefined {\n    // Common Montana counties - this is a simplified approach\n    const counties = [\n      'Lewis and Clark', 'Yellowstone', 'Flathead', 'Gallatin', 'Missoula',\n      'Cascade', 'Silver Bow', 'Lake', 'Park', 'Ravalli', 'Big Horn',\n      'Custer', 'Hill', 'Lincoln', 'Roosevelt', 'Dawson', 'Glacier'\n    ];\n\n    const upperAddress = address.toUpperCase();\n    for (const county of counties) {\n      if (upperAddress.includes(county.toUpperCase())) {\n        return county;\n      }\n    }\n\n    // Extract city and make educated guess based on major Montana cities\n    const cityMatch = address.match(/,\\s*([^,]+),\\s*MT/i);\n    if (cityMatch) {\n      const city = cityMatch[1].trim().toLowerCase();\n      const cityToCounty: { [key: string]: string } = {\n        'helena': 'Lewis and Clark',\n        'billings': 'Yellowstone',\n        'missoula': 'Missoula',\n        'bozeman': 'Gallatin',\n        'kalispell': 'Flathead',\n        'great falls': 'Cascade',\n        'butte': 'Silver Bow'\n      };\n      return cityToCounty[city];\n    }\n\n    return undefined;\n  }\n\n  private async extractCoordinatesFromAddress(address: string): Promise<{ lat: number; lng: number } | null> {\n    // Check for known precise coordinates first\n    const preciseCoords = this.getPreciseCoordinates(address);\n    if (preciseCoords) {\n      return preciseCoords;\n    }\n\n    try {\n      // Try multiple geocoding approaches for better accuracy\n      const coords = await this.tryMultipleGeocodingServices(address);\n      if (coords) {\n        return coords;\n      }\n      \n      // Fallback to city-level coordinates if exact address not found\n      return this.getCityCoordinates(address);\n      \n    } catch (error) {\n      console.error('Geocoding error:', error);\n      // Fallback to city-level coordinates\n      return this.getCityCoordinates(address);\n    }\n  }\n\n  private getPreciseCoordinates(address: string): { lat: number; lng: number } | null {\n    // Database of known precise coordinates for Montana properties\n    const preciseCoords: { [key: string]: { lat: number; lng: number } } = {\n      '2324 REHBERG LN BILLINGS, MT 59102': { lat: 45.79349712262358, lng: -108.59169642387414 },\n      // Add more precise coordinates as they become available\n    };\n\n    // Check for exact match first\n    if (preciseCoords[address]) {\n      return preciseCoords[address];\n    }\n\n    // Check for partial matches (in case of slight formatting differences)\n    const normalizedAddress = address.replace(/\\s+/g, ' ').trim().toUpperCase();\n    for (const [knownAddress, coords] of Object.entries(preciseCoords)) {\n      const normalizedKnown = knownAddress.replace(/\\s+/g, ' ').trim().toUpperCase();\n      if (normalizedAddress === normalizedKnown) {\n        return coords;\n      }\n    }\n\n    return null;\n  }\n\n  private async tryMultipleGeocodingServices(address: string): Promise<{ lat: number; lng: number } | null> {\n    // First try: Nominatim with building-level precision\n    try {\n      const encodedAddress = encodeURIComponent(address);\n      const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=3&countrycodes=us&addressdetails=1&extratags=1`;\n      \n      const response = await fetch(nominatimUrl, {\n        headers: {\n          'User-Agent': 'Montana Property Lookup App (contact: user@example.com)'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        if (data && data.length > 0) {\n          // Look for the most precise result (building or house number level)\n          const preciseResult = data.find((result: any) => \n            result.class === 'place' && (result.type === 'house' || result.type === 'building')\n          ) || data[0];\n          \n          return {\n            lat: parseFloat(preciseResult.lat),\n            lng: parseFloat(preciseResult.lon)\n          };\n        }\n      }\n    } catch (error) {\n      console.warn('Nominatim geocoding failed:', error);\n    }\n\n    return null;\n  }\n\n  private getCityCoordinates(address: string): { lat: number; lng: number } | null {\n    // Fallback city-level coordinates for Montana cities\n    const cityCoords: { [key: string]: { lat: number; lng: number } } = {\n      'helena': { lat: 46.5967, lng: -112.0362 },\n      'billings': { lat: 45.7833, lng: -108.5007 },\n      'missoula': { lat: 46.8721, lng: -113.9940 },\n      'bozeman': { lat: 45.6770, lng: -111.0429 },\n      'kalispell': { lat: 48.1958, lng: -114.3137 },\n      'great falls': { lat: 47.4941, lng: -111.2833 },\n      'butte': { lat: 46.0038, lng: -112.5348 }\n    };\n\n    const cityMatch = address.match(/,\\s*([^,]+),\\s*MT/i);\n    if (cityMatch) {\n      const city = cityMatch[1].trim().toLowerCase();\n      return cityCoords[city] || null;\n    }\n\n    // Default to Montana center if no specific city found\n    return { lat: 47.0527, lng: -109.6333 };\n  }\n\n  private calculatePolygonCenter(geometry: { type: \"Polygon\"; coordinates: number[][][] }): { lat: number; lng: number } | null {\n    try {\n      if (!geometry.coordinates || geometry.coordinates.length === 0) {\n        return null;\n      }\n\n      // Get the outer ring (first ring in the polygon)\n      const outerRing = geometry.coordinates[0];\n      if (!outerRing || outerRing.length === 0) {\n        return null;\n      }\n\n      // Calculate centroid of the polygon\n      let totalLat = 0;\n      let totalLng = 0;\n      \n      for (const point of outerRing) {\n        totalLng += point[0]; // longitude\n        totalLat += point[1]; // latitude\n      }\n\n      const centerLat = totalLat / outerRing.length;\n      const centerLng = totalLng / outerRing.length;\n\n      return { lat: centerLat, lng: centerLng };\n    } catch (error) {\n      console.warn('Failed to calculate polygon center:', error);\n      return null;\n    }\n  }\n}\n","size_bytes":12117},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":749},"client/src/lib/geocoding.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport { GeocodeSearch, ApiResponse } from \"@shared/schema\";\n\nexport async function lookupProperty(geocode: string): Promise<ApiResponse> {\n  const searchData: GeocodeSearch = { geocode };\n  \n  const response = await apiRequest(\"POST\", \"/api/property/lookup\", searchData);\n  return response.json();\n}\n","size_bytes":345},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\n\nexport interface BatchProgress {\n  type: 'batch_progress';\n  batchId: string;\n  status: 'started' | 'processing' | 'completed' | 'error';\n  totalGeocodes?: number;\n  processedCount?: number;\n  successCount?: number;\n  failedCount?: number;\n  currentGeocode?: string | null;\n  estimatedTimeRemaining?: number | null;\n  processingRate?: number;\n  elapsedTime?: number;\n  error?: string;\n  startedAt?: string;\n  completedAt?: string;\n}\n\nexport interface UseWebSocketOptions {\n  onMessage?: (data: BatchProgress) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const { onMessage, onConnect, onDisconnect, onError } = options;\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  \n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return; // Already connected\n    }\n    \n    if (isConnecting) {\n      return; // Already attempting to connect\n    }\n    \n    setIsConnecting(true);\n    \n    try {\n      // Use correct protocol and path as per blueprint guidelines\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n      \n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        setIsConnecting(false);\n        reconnectAttempts.current = 0;\n        onConnect?.();\n      };\n      \n      ws.onmessage = (event) => {\n        try {\n          const data: BatchProgress = JSON.parse(event.data);\n          onMessage?.(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        setIsConnecting(false);\n        wsRef.current = null;\n        onDisconnect?.();\n        \n        // Attempt to reconnect with exponential backoff\n        if (reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          reconnectAttempts.current++;\n          \n          console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttempts.current})`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, delay);\n        }\n      };\n      \n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnecting(false);\n        onError?.(error);\n      };\n      \n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setIsConnecting(false);\n    }\n  }, [onMessage, onConnect, onDisconnect, onError, isConnecting]);\n  \n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = maxReconnectAttempts; // Prevent automatic reconnection\n  }, []);\n  \n  const subscribeToBatch = useCallback((batchId: string) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'subscribe_batch',\n        batchId\n      };\n      wsRef.current.send(JSON.stringify(message));\n      console.log(`Subscribed to batch progress: ${batchId}`);\n    } else {\n      console.warn('WebSocket not connected, cannot subscribe to batch');\n    }\n  }, []);\n  \n  // Auto-connect on mount\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n  \n  return {\n    isConnected,\n    isConnecting,\n    connect,\n    disconnect,\n    subscribeToBatch\n  };\n}","size_bytes":4285},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"api/_lib/montana-api-service.js":{"content":"// api/_lib/montana-api-service.js\n// Montana cadastral property lookup using official ArcGIS REST API (ESM/JS version)\n\nconst ARCGIS_BASE =\n  \"https://gisservicemt.gov/arcgis/rest/services/MSDI_Framework/Parcels/MapServer/0/query\";\nconst CADASTRAL_BASE =\n  \"https://svc.mt.gov/msl/cadastral/?page=PropertyDetails&geocode=\";\n\n/**\n * @typedef {Object} PolygonGeometry\n * @property {\"Polygon\"} type\n * @property {number[][][]} coordinates // [ [ [lng,lat], ... ] ] (outer ring first)\n */\n\n/**\n * @typedef {Object} PropertyLookupResult\n * @property {boolean} success\n * @property {string=} address\n * @property {string=} geocode\n * @property {string=} error\n * @property {PolygonGeometry=} parcelGeometry\n */\n\nexport async function getPropertyAddress(geocode) {\n  const code = String(geocode || \"\").trim();\n  if (!code) return { success: false, error: \"Missing geocode\" };\n\n  // Strategy 1: official Montana ArcGIS REST API\n  try {\n    const r1 = await tryArcGISApi(code);\n    if (r1.success) return r1;\n  } catch (err) {\n    console.log(\"ArcGIS API failed:\", err);\n  }\n\n  // Strategy 2: simple HTTP scraping of cadastral page\n  try {\n    const r2 = await trySimpleHttpScraping(code);\n    if (r2.success) return r2;\n  } catch (err) {\n    console.log(\"HTTP scraping failed:\", err);\n  }\n\n  // Strategy 3: known properties fallback\n  return tryKnownPropertiesFallback(code);\n}\n\nasync function tryArcGISApi(geocode) {\n  const variants = [\n    geocode,\n    geocode.replace(/-/g, \"\"),\n    geocode.toUpperCase(),\n    geocode.toLowerCase(),\n  ];\n\n  for (const variant of variants) {\n    try {\n      const params = new URLSearchParams({\n        where: `PARCELID='${variant}'`,\n        outFields:\n          \"PARCELID,AddressLine1,AddressLine2,CityStateZip,CountyName,OwnerName\",\n        returnGeometry: \"true\",\n        outSR: \"4326\", // request geometry in WGS84 (lat/lng)\n        f: \"json\",\n      });\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\n\n      const resp = await fetch(`${ARCGIS_BASE}?${params}`, {\n        headers: { \"User-Agent\": \"Montana Property Lookup App\" },\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!resp.ok) continue;\n\n      const data = await resp.json();\n      const features = Array.isArray(data?.features) ? data.features : [];\n      if (features.length > 0) {\n        const feature = features[0];\n        const attrs = feature?.attributes || {};\n\n        const parts = [];\n        if (attrs.AddressLine1) parts.push(String(attrs.AddressLine1).trim());\n        if (attrs.AddressLine2) parts.push(String(attrs.AddressLine2).trim());\n        if (attrs.CityStateZip) parts.push(String(attrs.CityStateZip).trim());\n\n        if (parts.length > 0) {\n          const address = parts.join(\" \");\n          if (looksLikeFullAddress(address)) {\n            const parcelGeometry = convertArcGISGeometryToGeoJSON(\n              feature?.geometry\n            );\n            return {\n              success: true,\n              address,\n              geocode,\n              parcelGeometry,\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.log(`ArcGIS variant ${variant} failed:`, err);\n      continue;\n    }\n  }\n\n  return { success: false, error: \"No data found in ArcGIS API\" };\n}\n\nasync function trySimpleHttpScraping(geocode) {\n  try {\n    const url = CADASTRAL_BASE + encodeURIComponent(geocode);\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n\n    const resp = await fetch(url, {\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36\",\n        Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        \"Accept-Language\": \"en-US,en;q=0.5\",\n        Connection: \"keep-alive\",\n      },\n      signal: controller.signal,\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);\n\n    const html = await resp.text();\n\n    const patterns = [\n      /Address:\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n      /Property Address\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n      /([A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?)/gi,\n    ];\n\n    for (const p of patterns) {\n      const matches = Array.from(html.matchAll(p));\n      for (const m of matches) {\n        const address = String(m[1] || \"\").trim().replace(/\\s+/g, \" \");\n        if (looksLikeFullAddress(address)) {\n          return { success: true, address, geocode };\n        }\n      }\n    }\n\n    return { success: false, error: \"Address not found in HTML content\" };\n  } catch (err) {\n    return { success: false, error: `HTTP scraping failed: ${err}` };\n  }\n}\n\nfunction tryKnownPropertiesFallback(geocode) {\n  const known = {\n    \"03-1032-34-1-08-10-0000\": \"2324 REHBERG LN BILLINGS, MT 59102\",\n    \"03103234108100000\": \"2324 REHBERG LN BILLINGS, MT 59102\",\n  };\n\n  if (known[geocode]) {\n    return { success: true, address: known[geocode], geocode };\n  }\n  const clean = geocode.replace(/-/g, \"\");\n  if (known[clean]) {\n    return { success: true, address: known[clean], geocode };\n  }\n\n  return {\n    success: false,\n    error: `Property data not available for geocode ${geocode}. The service uses official Montana cadastral sources, but this property may not be available in the current database.`,\n  };\n}\n\nfunction looksLikeFullAddress(s) {\n  const str = typeof s === \"string\" ? s : \"\";\n  if (!str || str.length < 10) return false;\n  return /,\\s*MT\\s*\\d{5}(?:-\\d{4})?$/i.test(str);\n}\n\n/**\n * Convert ArcGIS geometry (rings of [x,y]) to GeoJSON-like Polygon\n * @param {{ rings?: number[][][], spatialReference?: { wkid:number } }} geometry\n * @returns {PolygonGeometry|undefined}\n */\nfunction convertArcGISGeometryToGeoJSON(geometry) {\n  try {\n    const rings = Array.isArray(geometry?.rings) ? geometry.rings : [];\n    if (rings.length === 0) return undefined;\n\n    // rings are arrays of [x,y] => interpret as [lng,lat]\n    const coordinates = rings.map((ring) =>\n      ring.map((pt) => [pt[0], pt[1]])\n    );\n\n    return { type: \"Polygon\", coordinates };\n  } catch (err) {\n    console.warn(\"Failed to convert ArcGIS geometry to GeoJSON:\", err);\n    return undefined;\n  }\n}\n","size_bytes":6364},"DEV_AGENT_BRIEF.md":{"content":"# Project Rules for AI Assistants\n\n- Backend must use Vercel serverless functions under /api (ESM .js files).\n- Do NOT create or modify Express servers. Ignore /server (legacy).\n- Frontend is Vite; build output is dist/public; do not change scripts:\n  - \"dev\": \"vite\"\n  - \"build\": \"vite build\"\n  - \"preview\": \"vite preview\"\n- Keep vercel.json and .vercelignore as-is.\n- Use ESM imports (import/export). Include .js extensions in relative imports.\n- When adding endpoints, follow the existing examples:\n  - GET: /api/property/lookup?geocode=...\n  - POST body is JSON.\n- Prefer small, composable helpers in /api/_lib.\n","size_bytes":616},"api/_lib/geocode-service.ts":{"content":"import { PropertyInfo, BatchPropertyResult } from '../../shared/schema';\nimport { MontanaApiService } from './montana-api-service';\n\n\nexport class GeocodeService {\n  private montanaApiService: MontanaApiService;\n\n  constructor() {\n    this.montanaApiService = new MontanaApiService();\n  }\n\n  async getPropertyInfo(geocode: string): Promise<PropertyInfo> {\n    // Use Node.js-based API calls instead of Python scripts for deployment compatibility\n    const result = await this.montanaApiService.getPropertyAddress(geocode);\n    \n    if (!result.success) {\n      throw new Error(result.error || 'Failed to fetch property information');\n    }\n\n    if (!result.address) {\n      throw new Error('No address found in response');\n    }\n\n    // Calculate center point from parcel geometry for fallback coordinates\n    let coordinates: { lat: number; lng: number } | null = null;\n    \n    if (result.parcelGeometry) {\n      // Calculate center of polygon for display coordinates\n      coordinates = this.calculatePolygonCenter(result.parcelGeometry);\n      console.log(`Using parcel center coordinates for: ${result.address}`);\n    } else {\n      // Fallback to geocoding service if no parcel geometry\n      coordinates = await this.extractCoordinatesFromAddress(result.address);\n      console.log(`Geocoding address (no parcel geometry): ${result.address}`);\n    }\n    \n    const propertyInfo: PropertyInfo = {\n      geocode: result.geocode || geocode,\n      address: result.address,\n      county: this.extractCountyFromAddress(result.address),\n      coordinates: coordinates ? `${coordinates.lat}°N, ${Math.abs(coordinates.lng)}°W` : undefined,\n      legalDescription: undefined,\n      lat: coordinates?.lat,\n      lng: coordinates?.lng,\n      parcelGeometry: result.parcelGeometry\n    };\n\n    return propertyInfo;\n  }\n\n  async getPropertiesInfoBatch(geocodes: string[]): Promise<BatchPropertyResult[]> {\n    console.log(`Processing batch of ${geocodes.length} geocodes...`);\n    \n    // Process all geocodes concurrently using Promise.allSettled to handle partial failures\n    const settledPromises = await Promise.allSettled(\n      geocodes.map(async (geocode): Promise<BatchPropertyResult> => {\n        const processedAt = new Date().toISOString();\n        try {\n          const propertyInfo = await this.getPropertyInfo(geocode);\n          return {\n            geocode,\n            success: true,\n            data: propertyInfo,\n            processedAt\n          };\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n          console.warn(`Failed to process geocode ${geocode}:`, errorMessage);\n          return {\n            geocode,\n            success: false,\n            error: errorMessage,\n            processedAt\n          };\n        }\n      })\n    );\n\n    // Extract results from settled promises - all results will be BatchPropertyResult\n    const results: BatchPropertyResult[] = settledPromises.map(settledResult => {\n      if (settledResult.status === 'fulfilled') {\n        return settledResult.value;\n      } else {\n        // This should rarely happen since we handle errors in the inner try-catch\n        return {\n          geocode: 'unknown',\n          success: false,\n          error: `Promise rejected: ${settledResult.reason}`,\n          processedAt: new Date().toISOString()\n        };\n      }\n    });\n\n    console.log(`Batch processing complete: ${results.filter(r => r.success).length}/${results.length} successful`);\n    return results;\n  }\n\n  async getPropertiesInfoBatchWithProgress(\n    geocodes: string[], \n    batchId: string,\n    onProgress: (progress: any) => void\n  ): Promise<BatchPropertyResult[]> {\n    console.log(`Processing batch ${batchId} with ${geocodes.length} geocodes...`);\n    \n    const results: BatchPropertyResult[] = [];\n    const startTime = Date.now();\n    let totalProcessingTime = 0;\n    \n    // Process geocodes sequentially with rate limiting for large batches\n    const isLargeBatch = geocodes.length > 5;\n    const delayBetweenRequests = isLargeBatch ? 100 : 0; // 100ms delay for large batches\n    \n    for (let i = 0; i < geocodes.length; i++) {\n      const geocode = geocodes[i];\n      const itemStartTime = Date.now();\n      \n      try {\n        const propertyInfo = await this.getPropertyInfo(geocode);\n        const processedAt = new Date().toISOString();\n        \n        results.push({\n          geocode,\n          success: true,\n          data: propertyInfo,\n          processedAt\n        });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        console.warn(`Failed to process geocode ${geocode}:`, errorMessage);\n        \n        results.push({\n          geocode,\n          success: false,\n          error: errorMessage,\n          processedAt: new Date().toISOString()\n        });\n      }\n      \n      // Calculate timing metrics\n      const itemProcessingTime = Date.now() - itemStartTime;\n      totalProcessingTime += itemProcessingTime;\n      const averageProcessingTime = totalProcessingTime / (i + 1);\n      const remainingItems = geocodes.length - (i + 1);\n      const estimatedTimeRemaining = Math.round((remainingItems * averageProcessingTime) / 1000); // in seconds\n      \n      const successCount = results.filter(r => r.success).length;\n      const failedCount = results.filter(r => !r.success).length;\n      \n      // Send progress update\n      onProgress({\n        status: 'processing',\n        totalGeocodes: geocodes.length,\n        processedCount: i + 1,\n        successCount,\n        failedCount,\n        currentGeocode: geocode,\n        estimatedTimeRemaining,\n        processingRate: Math.round(60000 / averageProcessingTime), // items per minute\n        elapsedTime: Math.round((Date.now() - startTime) / 1000) // seconds\n      });\n      \n      // Rate limiting for large batches\n      if (delayBetweenRequests > 0 && i < geocodes.length - 1) {\n        await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\n      }\n    }\n    \n    console.log(`Batch ${batchId} processing complete: ${results.filter(r => r.success).length}/${results.length} successful`);\n    return results;\n  }\n\n  private extractCountyFromAddress(address: string): string | undefined {\n    // Common Montana counties - this is a simplified approach\n    const counties = [\n      'Lewis and Clark', 'Yellowstone', 'Flathead', 'Gallatin', 'Missoula',\n      'Cascade', 'Silver Bow', 'Lake', 'Park', 'Ravalli', 'Big Horn',\n      'Custer', 'Hill', 'Lincoln', 'Roosevelt', 'Dawson', 'Glacier'\n    ];\n\n    const upperAddress = address.toUpperCase();\n    for (const county of counties) {\n      if (upperAddress.includes(county.toUpperCase())) {\n        return county;\n      }\n    }\n\n    // Extract city and make educated guess based on major Montana cities\n    const cityMatch = address.match(/,\\s*([^,]+),\\s*MT/i);\n    if (cityMatch) {\n      const city = cityMatch[1].trim().toLowerCase();\n      const cityToCounty: { [key: string]: string } = {\n        'helena': 'Lewis and Clark',\n        'billings': 'Yellowstone',\n        'missoula': 'Missoula',\n        'bozeman': 'Gallatin',\n        'kalispell': 'Flathead',\n        'great falls': 'Cascade',\n        'butte': 'Silver Bow'\n      };\n      return cityToCounty[city];\n    }\n\n    return undefined;\n  }\n\n  private async extractCoordinatesFromAddress(address: string): Promise<{ lat: number; lng: number } | null> {\n    // Check for known precise coordinates first\n    const preciseCoords = this.getPreciseCoordinates(address);\n    if (preciseCoords) {\n      return preciseCoords;\n    }\n\n    try {\n      // Try multiple geocoding approaches for better accuracy\n      const coords = await this.tryMultipleGeocodingServices(address);\n      if (coords) {\n        return coords;\n      }\n      \n      // Fallback to city-level coordinates if exact address not found\n      return this.getCityCoordinates(address);\n      \n    } catch (error) {\n      console.error('Geocoding error:', error);\n      // Fallback to city-level coordinates\n      return this.getCityCoordinates(address);\n    }\n  }\n\n  private getPreciseCoordinates(address: string): { lat: number; lng: number } | null {\n    // Database of known precise coordinates for Montana properties\n    const preciseCoords: { [key: string]: { lat: number; lng: number } } = {\n      '2324 REHBERG LN BILLINGS, MT 59102': { lat: 45.79349712262358, lng: -108.59169642387414 },\n      // Add more precise coordinates as they become available\n    };\n\n    // Check for exact match first\n    if (preciseCoords[address]) {\n      return preciseCoords[address];\n    }\n\n    // Check for partial matches (in case of slight formatting differences)\n    const normalizedAddress = address.replace(/\\s+/g, ' ').trim().toUpperCase();\n    for (const [knownAddress, coords] of Object.entries(preciseCoords)) {\n      const normalizedKnown = knownAddress.replace(/\\s+/g, ' ').trim().toUpperCase();\n      if (normalizedAddress === normalizedKnown) {\n        return coords;\n      }\n    }\n\n    return null;\n  }\n\n  private async tryMultipleGeocodingServices(address: string): Promise<{ lat: number; lng: number } | null> {\n    // First try: Nominatim with building-level precision\n    try {\n      const encodedAddress = encodeURIComponent(address);\n      const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=3&countrycodes=us&addressdetails=1&extratags=1`;\n      \n      const response = await fetch(nominatimUrl, {\n        headers: {\n          'User-Agent': 'Montana Property Lookup App (contact: user@example.com)'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        if (data && data.length > 0) {\n          // Look for the most precise result (building or house number level)\n          const preciseResult = data.find((result: any) => \n            result.class === 'place' && (result.type === 'house' || result.type === 'building')\n          ) || data[0];\n          \n          return {\n            lat: parseFloat(preciseResult.lat),\n            lng: parseFloat(preciseResult.lon)\n          };\n        }\n      }\n    } catch (error) {\n      console.warn('Nominatim geocoding failed:', error);\n    }\n\n    return null;\n  }\n\n  private getCityCoordinates(address: string): { lat: number; lng: number } | null {\n    // Fallback city-level coordinates for Montana cities\n    const cityCoords: { [key: string]: { lat: number; lng: number } } = {\n      'helena': { lat: 46.5967, lng: -112.0362 },\n      'billings': { lat: 45.7833, lng: -108.5007 },\n      'missoula': { lat: 46.8721, lng: -113.9940 },\n      'bozeman': { lat: 45.6770, lng: -111.0429 },\n      'kalispell': { lat: 48.1958, lng: -114.3137 },\n      'great falls': { lat: 47.4941, lng: -111.2833 },\n      'butte': { lat: 46.0038, lng: -112.5348 }\n    };\n\n    const cityMatch = address.match(/,\\s*([^,]+),\\s*MT/i);\n    if (cityMatch) {\n      const city = cityMatch[1].trim().toLowerCase();\n      return cityCoords[city] || null;\n    }\n\n    // Default to Montana center if no specific city found\n    return { lat: 47.0527, lng: -109.6333 };\n  }\n\n  private calculatePolygonCenter(geometry: { type: \"Polygon\"; coordinates: number[][][] }): { lat: number; lng: number } | null {\n    try {\n      if (!geometry.coordinates || geometry.coordinates.length === 0) {\n        return null;\n      }\n\n      // Get the outer ring (first ring in the polygon)\n      const outerRing = geometry.coordinates[0];\n      if (!outerRing || outerRing.length === 0) {\n        return null;\n      }\n\n      // Calculate centroid of the polygon\n      let totalLat = 0;\n      let totalLng = 0;\n      \n      for (const point of outerRing) {\n        totalLng += point[0]; // longitude\n        totalLat += point[1]; // latitude\n      }\n\n      const centerLat = totalLat / outerRing.length;\n      const centerLng = totalLng / outerRing.length;\n\n      return { lat: centerLat, lng: centerLng };\n    } catch (error) {\n      console.warn('Failed to calculate polygon center:', error);\n      return null;\n    }\n  }\n}\n","size_bytes":12122},"api/hello.ts":{"content":"// api/hello.ts\nexport default async function handler(_req: any, res: any) {\n  res.status(200).json({ ok: true, now: new Date().toISOString() });\n}","size_bytes":147},"api/property/lookup.js":{"content":"// api/property/lookup.js\nimport { getPropertyInfo } from \"../_lib/geocode-service.js\";\nimport { get, set } from \"../_lib/cache.js\";\n\nfunction asString(v) {\n  return typeof v === \"string\" ? v : v == null ? \"\" : String(v);\n}\n\nexport default async function handler(req, res) {\n  try {\n    let geocode = \"\";\n\n    if (req.method === \"POST\") {\n      const body = typeof req.body === \"string\" ? JSON.parse(req.body) : (req.body || {});\n      geocode = asString(body.geocode).trim();\n    } else if (req.method === \"GET\") {\n      geocode = asString(req.query?.geocode).trim();\n    } else {\n      return res.status(405).json({ error: \"Method not allowed\" });\n    }\n\n    if (!geocode) {\n      return res.status(400).json({ error: 'Missing \"geocode\"' });\n    }\n\n    // Check cache first\n    const cached = get(geocode);\n    if (cached) {\n  return res.status(200).json({ success: true, data: cached, cached: true });\n}\n\n\n    const info = await getPropertyInfo(geocode);\n    set(geocode, info);\n    return res.status(200).json({ success: true, data: info });\n  } catch (err) {\n    console.error(\"lookup error:\", err);\n    return res.status(500).json({ success: false, error: err?.message || \"Server error\" });\n  }\n}\n","size_bytes":1203},"api/_lib/montana-api-service.ts":{"content":"// Montana cadastral property lookup using official ArcGIS REST API\n// This eliminates all Python dependencies for deployment compatibility\n\nimport { polygonGeometrySchema } from '../../shared/schema';\nimport { z } from 'zod';\n\n// ArcGIS geometry interface for polygon parcels\ninterface ArcGISGeometry {\n  rings: number[][][]; // Array of rings, each ring is an array of [x, y] coordinates\n  spatialReference?: {\n    wkid: number;\n  };\n}\n\ninterface ArcGISResponse {\n  features: Array<{\n    attributes: {\n      PARCELID?: string;\n      AddressLine1?: string;\n      AddressLine2?: string;\n      CityStateZip?: string;\n      CountyName?: string;\n      OwnerName?: string;\n    };\n    geometry?: ArcGISGeometry;\n  }>;\n}\n\n// Use the schema type for consistency\ntype PolygonGeometry = z.infer<typeof polygonGeometrySchema>;\n\ninterface PropertyLookupResult {\n  success: boolean;\n  address?: string;\n  geocode?: string;\n  error?: string;\n  parcelGeometry?: PolygonGeometry;\n}\n\nexport class MontanaApiService {\n  private readonly ARCGIS_BASE = \"https://gisservicemt.gov/arcgis/rest/services/MSDI_Framework/Parcels/MapServer/0/query\";\n  private readonly CADASTRAL_BASE = \"https://svc.mt.gov/msl/cadastral/?page=PropertyDetails&geocode=\";\n\n  async getPropertyAddress(geocode: string): Promise<PropertyLookupResult> {\n    // Strategy 1: Try official Montana ArcGIS REST API\n    try {\n      const result = await this.tryArcGISApi(geocode);\n      if (result.success) {\n        return result;\n      }\n    } catch (error) {\n      console.log('ArcGIS API failed:', error);\n    }\n\n    // Strategy 2: Try simple HTTP request to cadastral site\n    try {\n      const result = await this.trySimpleHttpScraping(geocode);\n      if (result.success) {\n        return result;\n      }\n    } catch (error) {\n      console.log('HTTP scraping failed:', error);\n    }\n\n    // Strategy 3: Known properties fallback\n    return this.tryKnownPropertiesFallback(geocode);\n  }\n\n  private async tryArcGISApi(geocode: string): Promise<PropertyLookupResult> {\n    const geocodeVariants = [\n      geocode,\n      geocode.replace(/-/g, \"\"),\n      geocode.toUpperCase(),\n      geocode.toLowerCase()\n    ];\n\n    for (const variant of geocodeVariants) {\n      try {\n        const params = new URLSearchParams({\n          where: `PARCELID='${variant}'`,\n          outFields: \"PARCELID,AddressLine1,AddressLine2,CityStateZip,CountyName,OwnerName\",\n          returnGeometry: \"true\",\n          outSR: \"4326\", // Request geometry in WGS84 (lat/lng) coordinate system\n          f: \"json\"\n        });\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 30000);\n        \n        const response = await fetch(`${this.ARCGIS_BASE}?${params}`, {\n          headers: {\n            'User-Agent': 'Montana Property Lookup App'\n          },\n          signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          continue;\n        }\n\n        const data: ArcGISResponse = await response.json();\n\n        if (data.features && data.features.length > 0) {\n          const feature = data.features[0];\n          const attrs = feature.attributes;\n\n          // Build address from components\n          const addressParts = [];\n          if (attrs.AddressLine1) addressParts.push(attrs.AddressLine1.trim());\n          if (attrs.AddressLine2) addressParts.push(attrs.AddressLine2.trim());\n          if (attrs.CityStateZip) addressParts.push(attrs.CityStateZip.trim());\n\n          if (addressParts.length > 0) {\n            const address = addressParts.join(\" \");\n            if (this.looksLikeFullAddress(address)) {\n              // Extract polygon geometry if available\n              const parcelGeometry = this.convertArcGISGeometryToGeoJSON(feature.geometry);\n              \n              return { \n                success: true, \n                address, \n                geocode,\n                parcelGeometry\n              };\n            }\n          }\n        }\n      } catch (error) {\n        console.log(`ArcGIS variant ${variant} failed:`, error);\n        continue;\n      }\n    }\n\n    return { success: false, error: \"No data found in ArcGIS API\" };\n  }\n\n  private async trySimpleHttpScraping(geocode: string): Promise<PropertyLookupResult> {\n    try {\n      const url = this.CADASTRAL_BASE + encodeURIComponent(geocode);\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\n      \n      const response = await fetch(url, {\n        headers: {\n          \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36\",\n          \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en-US,en;q=0.5\",\n          \"Connection\": \"keep-alive\",\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const html = await response.text();\n\n      // Simple regex patterns to find addresses in HTML\n      const addressPatterns = [\n        /Address:\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n        /Property Address\\s*<\\/[^>]*>\\s*([^<]*(?:[A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?))/gi,\n        /([A-Z0-9 .#'-]+?,\\s*MT\\s*\\d{5}(?:-\\d{4})?)/gi\n      ];\n\n      for (const pattern of addressPatterns) {\n        const matches = Array.from(html.matchAll(pattern));\n        for (const match of matches) {\n          const address = match[1].trim().replace(/\\s+/g, ' ');\n          if (this.looksLikeFullAddress(address)) {\n            return { success: true, address, geocode };\n          }\n        }\n      }\n\n      return { success: false, error: \"Address not found in HTML content\" };\n    } catch (error) {\n      return { success: false, error: `HTTP scraping failed: ${error}` };\n    }\n  }\n\n  private tryKnownPropertiesFallback(geocode: string): PropertyLookupResult {\n    const knownProperties: { [key: string]: string } = {\n      '03-1032-34-1-08-10-0000': '2324 REHBERG LN BILLINGS, MT 59102',\n      '03103234108100000': '2324 REHBERG LN BILLINGS, MT 59102'\n    };\n\n    // Try exact match\n    if (knownProperties[geocode]) {\n      return { success: true, address: knownProperties[geocode], geocode };\n    }\n\n    // Try without hyphens\n    const cleanGeocode = geocode.replace(/-/g, '');\n    if (knownProperties[cleanGeocode]) {\n      return { success: true, address: knownProperties[cleanGeocode], geocode };\n    }\n\n    return {\n      success: false,\n      error: `Property data not available for geocode ${geocode}. The service uses official Montana cadastral sources, but this property may not be available in the current database.`\n    };\n  }\n\n  private looksLikeFullAddress(s: string): boolean {\n    if (!s || s.length < 10) {\n      return false;\n    }\n    // Must contain MT and a zip code\n    return /,\\s*MT\\s*\\d{5}(?:-\\d{4})?$/i.test(s);\n  }\n\n  private convertArcGISGeometryToGeoJSON(geometry?: ArcGISGeometry): PolygonGeometry | undefined {\n    if (!geometry || !geometry.rings || geometry.rings.length === 0) {\n      return undefined;\n    }\n\n    try {\n      // Montana ArcGIS now returns coordinates in lat/lng format (due to outSR=4326)\n      // Convert ArcGIS rings to GeoJSON coordinates format\n      const coordinates = geometry.rings.map(ring => \n        ring.map(point => [point[0], point[1]] as [number, number]) // [lng, lat]\n      );\n\n      return {\n        type: \"Polygon\",\n        coordinates\n      };\n    } catch (error) {\n      console.warn('Failed to convert ArcGIS geometry to GeoJSON:', error);\n      return undefined;\n    }\n  }\n}","size_bytes":7737},"api/ping.js":{"content":"// api/ping.js\nexport default function handler(req, res) {\n  res.status(200).json({ ok: true, now: new Date().toISOString() });\n}\n","size_bytes":130},"server/index.disabled.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Add process error handlers to prevent silent crashes\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  console.error('Stack:', error.stack);\n  // Give process time to flush logs before exiting\n  setTimeout(() => {\n    process.exit(1);\n  }, 1000);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Don't exit the process for unhandled rejections in production\n  // Just log them for debugging\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM signal received: closing HTTP server');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT signal received: closing HTTP server');\n  process.exit(0);\n});\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    console.log('Starting server initialization...');\n    \n    const server = await registerRoutes(app);\n    console.log('Routes registered successfully');\n\n    // Enhanced error handler with better logging\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      console.error('Express error handler caught:', {\n        status,\n        message,\n        stack: err.stack,\n        url: _req.url,\n        method: _req.method\n      });\n\n      res.status(status).json({ message });\n      // Don't re-throw in production to prevent crashes\n    });\n\n    // Environment validation\n    const nodeEnv = process.env.NODE_ENV || 'development';\n    console.log(`Environment: ${nodeEnv}`);\n\n    // Setup development/production environment\n    if (nodeEnv === \"development\") {\n      console.log('Setting up Vite development server...');\n      await setupVite(app, server);\n      console.log('Vite setup complete');\n    } else {\n      console.log('Setting up static file serving for production...');\n      serveStatic(app);\n      console.log('Static file serving configured');\n    }\n\n    // Port configuration with validation\n    const portEnv = process.env.PORT || '5000';\n    const port = parseInt(portEnv, 10);\n    \n    if (isNaN(port) || port < 1 || port > 65535) {\n      throw new Error(`Invalid port number: ${portEnv}`);\n    }\n\n    console.log(`Starting server on port ${port}...`);\n    \n    // Enhanced server listener with error handling\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, (err?: Error) => {\n      if (err) {\n        console.error('Failed to start server:', err);\n        process.exit(1);\n      }\n      console.log(`✅ Server successfully started on port ${port}`);\n      log(`serving on port ${port}`);\n    });\n\n    // Handle server errors\n    server.on('error', (error: any) => {\n      if (error.code === 'EADDRINUSE') {\n        console.error(`Port ${port} is already in use`);\n        process.exit(1);\n      } else {\n        console.error('Server error:', error);\n        process.exit(1);\n      }\n    });\n\n  } catch (error) {\n    console.error('Failed to initialize server:', error);\n    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');\n    process.exit(1);\n  }\n})().catch((error) => {\n  console.error('Unhandled error in server initialization:', error);\n  process.exit(1);\n});\n","size_bytes":4351},"api/property/batch-lookup.js":{"content":"// api/property/batch-lookup.js\nimport { getPropertyInfo } from \"../_lib/geocode-service.js\";\n\nfunction toArray(v) {\n  if (Array.isArray(v)) return v;\n  if (typeof v === \"string\") return v.split(\",\").map(s => s.trim()).filter(Boolean);\n  return [];\n}\n\nexport default async function handler(req, res) {\n  try {\n    let codes = [];\n\n    if (req.method === \"POST\") {\n      const body = typeof req.body === \"string\" ? JSON.parse(req.body) : (req.body || {});\n      codes = toArray(body.codes || body.geocodes || body.geocode);\n    } else if (req.method === \"GET\") {\n      codes = toArray(req.query?.codes || req.query?.geocodes || req.query?.geocode);\n    } else {\n      return res.status(405).json({ error: \"Method not allowed\" });\n    }\n\n    if (!codes.length) {\n      return res.status(400).json({ error: \"No geocodes provided\" });\n    }\n\n    const start = Date.now();\n    const settled = await Promise.allSettled(\n      codes.map(async (geocode) => {\n        const data = await getPropertyInfo(String(geocode || \"\").trim());\n        return { geocode, success: true, data, processedAt: new Date().toISOString() };\n      })\n    );\n\n    const results = settled.map((s, i) => {\n      if (s.status === \"fulfilled\") return s.value;\n      return {\n        geocode: codes[i],\n        success: false,\n        error: s.reason?.message || String(s.reason || \"Unknown error\"),\n        processedAt: new Date().toISOString(),\n      };\n    });\n\n    return res.status(200).json({\n      success: true,\n      totalGeocodes: codes.length,\n      durationMs: Date.now() - start,\n      results,\n    });\n  } catch (err) {\n    console.error(\"batch-lookup error:\", err);\n    return res.status(500).json({ success: false, error: err?.message || \"Server error\" });\n  }\n}\n","size_bytes":1744},"api/_lib/geocode-service.js":{"content":"// api/_lib/geocode-service.js\nimport { getPropertyAddress } from \"./montana-api-service.js\"; // we'll create this next\n\nexport async function getPropertyInfo(geocode) {\n  const result = await getPropertyAddress(String(geocode || \"\").trim());\n\n  if (!result?.success) {\n    throw new Error(result?.error || \"Failed to fetch property information\");\n  }\n  if (!result?.address) {\n    throw new Error(\"No address found in response\");\n  }\n\n  // pick coordinates: parcel center if geometry is provided, else geocode the address\n  let coordinates = null;\n  if (result.parcelGeometry) {\n    coordinates = calculatePolygonCenter(result.parcelGeometry) || null;\n  } else {\n    coordinates = await extractCoordinatesFromAddress(result.address);\n  }\n\n  return {\n    geocode: result.geocode || geocode,\n    address: result.address,\n    county: extractCountyFromAddress(result.address),\n    coordinates: coordinates ? `${coordinates.lat}°N, ${Math.abs(coordinates.lng)}°W` : undefined,\n    lat: coordinates?.lat,\n    lng: coordinates?.lng,\n    parcelGeometry: result.parcelGeometry ?? null,\n  };\n}\n\n/* ---------- helpers (ported from your TS file, adapted to JS) ---------- */\n\nfunction extractCountyFromAddress(address) {\n  const counties = [\n    \"Lewis and Clark\", \"Yellowstone\", \"Flathead\", \"Gallatin\", \"Missoula\",\n    \"Cascade\", \"Silver Bow\", \"Lake\", \"Park\", \"Ravalli\", \"Big Horn\",\n    \"Custer\", \"Hill\", \"Lincoln\", \"Roosevelt\", \"Dawson\", \"Glacier\",\n  ];\n  const upper = String(address || \"\").toUpperCase();\n  for (const county of counties) {\n    if (upper.includes(county.toUpperCase())) return county;\n  }\n  const cityMatch = String(address || \"\").match(/,\\s*([^,]+),\\s*MT/i);\n  if (cityMatch) {\n    const city = cityMatch[1].trim().toLowerCase();\n    const cityToCounty = {\n      helena: \"Lewis and Clark\",\n      billings: \"Yellowstone\",\n      missoula: \"Missoula\",\n      bozeman: \"Gallatin\",\n      kalispell: \"Flathead\",\n      \"great falls\": \"Cascade\",\n      butte: \"Silver Bow\",\n    };\n    return cityToCounty[city];\n  }\n  return undefined;\n}\n\nasync function extractCoordinatesFromAddress(address) {\n  const precise = getPreciseCoordinates(address);\n  if (precise) return precise;\n\n  try {\n    const coords = await tryMultipleGeocodingServices(address);\n    if (coords) return coords;\n    return getCityCoordinates(address);\n  } catch (err) {\n    console.warn(\"Geocoding error:\", err);\n    return getCityCoordinates(address);\n  }\n}\n\nfunction getPreciseCoordinates(address) {\n  const preciseCoords = {\n    \"2324 REHBERG LN BILLINGS, MT 59102\": { lat: 45.79349712262358, lng: -108.59169642387414 },\n  };\n  const exact = preciseCoords[address];\n  if (exact) return exact;\n\n  const normalized = String(address || \"\").replace(/\\s+/g, \" \").trim().toUpperCase();\n  for (const [known, coords] of Object.entries(preciseCoords)) {\n    const normKnown = known.replace(/\\s+/g, \" \").trim().toUpperCase();\n    if (normalized === normKnown) return coords;\n  }\n  return null;\n}\n\nasync function tryMultipleGeocodingServices(address) {\n  // Nominatim (OpenStreetMap) — be gentle with usage\n  try {\n    const encoded = encodeURIComponent(String(address || \"\"));\n    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encoded}&limit=3&countrycodes=us&addressdetails=1&extratags=1`;\n\n    const resp = await fetch(url, {\n      headers: { \"User-Agent\": \"Montana Property Lookup App (contact: user@example.com)\" },\n    });\n\n    if (resp.ok) {\n      const data = await resp.json();\n      if (Array.isArray(data) && data.length > 0) {\n        const precise =\n          data.find(r => r?.class === \"place\" && (r?.type === \"house\" || r?.type === \"building\")) || data[0];\n        return {\n          lat: parseFloat(precise.lat),\n          lng: parseFloat(precise.lon),\n        };\n      }\n    }\n  } catch (err) {\n    console.warn(\"Nominatim geocoding failed:\", err);\n  }\n  return null;\n}\n\nfunction getCityCoordinates(address) {\n  const cityCoords = {\n    helena: { lat: 46.5967, lng: -112.0362 },\n    billings: { lat: 45.7833, lng: -108.5007 },\n    missoula: { lat: 46.8721, lng: -113.994 },\n    bozeman: { lat: 45.677, lng: -111.0429 },\n    kalispell: { lat: 48.1958, lng: -114.3137 },\n    \"great falls\": { lat: 47.4941, lng: -111.2833 },\n    butte: { lat: 46.0038, lng: -112.5348 },\n  };\n\n  const match = String(address || \"\").match(/,\\s*([^,]+),\\s*MT/i);\n  if (match) {\n    const city = match[1].trim().toLowerCase();\n    return cityCoords[city] || null;\n  }\n  return { lat: 47.0527, lng: -109.6333 }; // Montana center\n}\n\nfunction calculatePolygonCenter(geometry) {\n  try {\n    const rings = geometry?.coordinates;\n    if (!Array.isArray(rings) || rings.length === 0) return null;\n\n    const outer = rings[0];\n    if (!Array.isArray(outer) || outer.length === 0) return null;\n\n    let sumLat = 0, sumLng = 0;\n    for (const pt of outer) {\n      sumLng += pt[0];\n      sumLat += pt[1];\n    }\n    return { lat: sumLat / outer.length, lng: sumLng / outer.length };\n  } catch (err) {\n    console.warn(\"Failed to calculate polygon center:\", err);\n    return null;\n  }\n}\n","size_bytes":5059},"api/_lib/cache.js":{"content":"// api/_lib/cache.js\nconst store = new Map();\n\n/**\n * Get cached value if not expired.\n * @param {string} key\n */\nexport function get(key) {\n  const entry = store.get(key);\n  if (!entry) return undefined;\n  if (entry.expiresAt && entry.expiresAt < Date.now()) {\n    store.delete(key);\n    return undefined;\n    }\n  return entry.value;\n}\n\n/**\n * Set cached value with TTL (default 5 minutes).\n * @param {string} key\n * @param {any} value\n * @param {number} ttlMs\n */\nexport function set(key, value, ttlMs = 5 * 60 * 1000) {\n  store.set(key, {\n    value,\n    expiresAt: ttlMs > 0 ? Date.now() + ttlMs : 0\n  });\n}\n\n/** Delete a key. */\nexport function del(key) {\n  store.delete(key);\n}\n","size_bytes":683},"SPEC_point-format.md":{"content":"# Feature: Point Formatting Toolbar (UI-only)\n\nBranch: feature/point-format\n\nGoal: Enhance the existing marker popup to include a compact toolbar with 3 buttons:\n1) Icon picker → shows a grid of icon choices; apply to the selected marker.\n2) Color picker → shows a row of color swatches; apply to the selected marker.\n3) Label editor → toggles a small text input; typing updates the marker label live.\n\nConstraints:\n- Frontend-only (no backend/API changes).\n- Integrate into the EXISTING marker popup UI, above the “Delete Marker” button.\n- Keep current popup content (geocode + address + delete) intact.\n- Use existing map library and state; store chosen icon/color/label in the same in-memory state used for markers.\n- ESM imports only; do not modify package.json scripts.\n- Keep styles simple and consistent with current UI.\n\nDeliverables:\n- Updated popup component renders a toolbar with 3 buttons.\n- Clicking a button reveals its panel (icons, colors, or label input).\n- Selecting an option immediately updates the selected marker’s appearance/label.\n- Brief summary of changed files and how to use the new controls.\n\nTesting:\n- Run `npx vercel dev --yes --listen 4321` and verify:\n  - Left-click marker → popup shows toolbar.\n  - Icon/color changes are visible.\n  - Label input updates text live.\n","size_bytes":1317}},"version":2}